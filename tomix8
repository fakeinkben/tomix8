(()=>{"use strict";var e={521:e=>{e.exports=require("readline")}},t={};function a(s){var n=t[s];if(void 0!==n)return n.exports;var i=t[s]={exports:{}};return e[s](i,i.exports,a),i.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var s in t)a.o(t,s)&&!a.o(e,s)&&Object.defineProperty(e,s,{enumerable:!0,get:t[s]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{var e;!function(e){e[e.a8=0]="a8",e[e.b8=1]="b8",e[e.c8=2]="c8",e[e.d8=3]="d8",e[e.e8=4]="e8",e[e.f8=5]="f8",e[e.g8=6]="g8",e[e.h8=7]="h8",e[e.a7=8]="a7",e[e.b7=9]="b7",e[e.c7=10]="c7",e[e.d7=11]="d7",e[e.e7=12]="e7",e[e.f7=13]="f7",e[e.g7=14]="g7",e[e.h7=15]="h7",e[e.a6=16]="a6",e[e.b6=17]="b6",e[e.c6=18]="c6",e[e.d6=19]="d6",e[e.e6=20]="e6",e[e.f6=21]="f6",e[e.g6=22]="g6",e[e.h6=23]="h6",e[e.a5=24]="a5",e[e.b5=25]="b5",e[e.c5=26]="c5",e[e.d5=27]="d5",e[e.e5=28]="e5",e[e.f5=29]="f5",e[e.g5=30]="g5",e[e.h5=31]="h5",e[e.a4=32]="a4",e[e.b4=33]="b4",e[e.c4=34]="c4",e[e.d4=35]="d4",e[e.e4=36]="e4",e[e.f4=37]="f4",e[e.g4=38]="g4",e[e.h4=39]="h4",e[e.a3=40]="a3",e[e.b3=41]="b3",e[e.c3=42]="c3",e[e.d3=43]="d3",e[e.e3=44]="e3",e[e.f3=45]="f3",e[e.g3=46]="g3",e[e.h3=47]="h3",e[e.a2=48]="a2",e[e.b2=49]="b2",e[e.c2=50]="c2",e[e.d2=51]="d2",e[e.e2=52]="e2",e[e.f2=53]="f2",e[e.g2=54]="g2",e[e.h2=55]="h2",e[e.a1=56]="a1",e[e.b1=57]="b1",e[e.c1=58]="c1",e[e.d1=59]="d1",e[e.e1=60]="e1",e[e.f1=61]="f1",e[e.g1=62]="g1",e[e.h1=63]="h1",e[e.no_sq=64]="no_sq"}(e||(e={}));class t{constructor(){this.name="KhepriChess",this.version="4.0.1",this.author="Kurt Peters",this.isChess960=!1,this.SquareBigInt=[0n,1n,2n,3n,4n,5n,6n,7n,8n,9n,10n,11n,12n,13n,14n,15n,16n,17n,18n,19n,20n,21n,22n,23n,24n,25n,26n,27n,28n,29n,30n,31n,32n,33n,34n,35n,36n,37n,38n,39n,40n,41n,42n,43n,44n,45n,46n,47n,48n,49n,50n,51n,52n,53n,54n,55n,56n,57n,58n,59n,60n,61n,62n,63n,64n],this.CharToPiece=new Map([["P",{Type:0,Color:0}],["N",{Type:1,Color:0}],["B",{Type:2,Color:0}],["R",{Type:3,Color:0}],["Q",{Type:4,Color:0}],["K",{Type:5,Color:0}],["p",{Type:0,Color:1}],["n",{Type:1,Color:1}],["b",{Type:2,Color:1}],["r",{Type:3,Color:1}],["q",{Type:4,Color:1}],["k",{Type:5,Color:1}]]),this.PieceToChar=new Map([[0,"P"],[1,"N"],[2,"B"],[3,"R"],[4,"Q"],[5,"K"]]),this.Zobrist={Pieces:Array.from(Array(2),(()=>Array.from(Array(6),(()=>new Array(64))))),EnPassant:new BigUint64Array(64),Castle:new BigUint64Array(16),SideToMove:0n},this.PhaseValues=[0,1,1,2,4,0],this.PhaseTotal=4*this.PhaseValues[1]+4*this.PhaseValues[2]+4*this.PhaseValues[3]+2*this.PhaseValues[4],this.BoardHistory=[],this.BoardState={PiecesBB:new BigUint64Array(12),OccupanciesBB:new BigUint64Array(2),Squares:new Array(64).fill(void 0),SideToMove:0,EnPassSq:e.no_sq,HalfMoves:0,Ply:0,Hash:0n,PawnHash:0n,Phase:this.PhaseTotal,CastlingRights:0,CastlingPaths:[],CastlingRookSquares:[],CastlingSquaresMask:new Array(64).fill(15)},this.rankMasks=new BigUint64Array(64),this.fileMasks=new BigUint64Array(64),this.isolatedMasks=new BigUint64Array(64),this.passedMasks=Array(2).fill(0).map((()=>Array(64).fill(0))),this.betweenMasks=Array(64).fill(0n).map((()=>Array(64).fill(0n))),this.attackRays=Array.from(Array(3),(()=>new Array(64).fill(0n))),this.squareBB=new BigUint64Array(64),this.distanceBetween=Array(64).fill(0n).map((()=>Array(64).fill(0n))),this.notAFile=18374403900871474942n,this.notHFile=9187201950435737471n,this.notHGFile=4557430888798830399n,this.notABFile=18229723555195321596n,this.PawnAttacks=new BigUint64Array(128),this.KnightAttacks=new BigUint64Array(64),this.KingAttacks=new BigUint64Array(64),this.BishopMasks=new BigUint64Array(64),this.BishopAttacks=Array.from(Array(64),(()=>new Array(512))),this.RookMasks=new BigUint64Array(64),this.RookAttacks=Array.from(Array(64),(()=>new Array(4096))),this.BishopMagicNumbers=[0x2004200884050840n,0x410100220842020n,0x4008108408800844n,0x4188204040844200n,0x2044030841204080n,0x5008229010048001n,0x48809008228000n,0xa00210050100800n,0x40121020020c006an,0x1441004012828n,0x5188202420508n,0x1106404208c00a1n,0x2820884841010000n,0x1800020802480841n,0x48440048041008c0n,0x128c1a020686a800n,0x4808011191100080n,0x885402008208102n,0x204000818002008n,0x28000c204010a0n,0x204a000404a20020n,0x4001000020a01000n,0x9008912044100888n,0x5603c082090901n,0x6620700048230800n,0x18100d00820c1c02n,0x49222002c040403n,0x20808088020002n,0x4038c000280201an,0x2080836809011n,0x102008432280100n,0x201c302011280n,0x121008040122c400n,0x104014801200211n,0x3800223400080800n,0x14020080480080n,0x2004040400001010n,0xd0510040460041n,0x1180082010460n,0x4208c0040370504n,0x12010440002200n,0x40104208440020a0n,0x1d0c0048001404n,0x804204010452200n,0xa08102010401208n,0x230115001002020n,0x2008028082040402n,0x408080060480380n,0x1010802402080n,0x403088090086800n,0x20a0020201041000n,0x200a8042420e0800n,0x8004008a1010400n,0x910230010004n,0xc0100200811040n,0x2202102307050410n,0x20208200904000n,0x4002104100411n,0x8010000044040490n,0xa0008040840400n,0x1006001110121201n,0xc00c4088017108n,0x2800080210020210n,0x60200a1002018910n],this.RookMagicNumbers=[0x80016418400081n,0x40004010002000n,0x48020011000800an,0xc800c8290000800n,0x200080420020010n,0x8100020400080100n,0x8080008002000100n,0xe10000c600288100n,0x800080304000n,0xa00210a004081n,0xb0080200010008an,0x8808008001000n,0x1004808004000800n,0x92000600508c08n,0x100400040102d018n,0x8004e9000a80n,0x21b4228000400082n,0x41010020804000n,0x208c110020090040n,0x2030010020081100n,0x300808008000400n,0x9202008080040002n,0x400804000201b008n,0x1060020004008041n,0x36846080034000n,0x208040008020008cn,0x200080100080n,0x2088100080080080n,0x1800808004000an,0x812040080020080n,0x8041010400100802n,0x904a482000c00c3n,0x40204000800080n,0x40201008400041n,0xa10040800200020n,0x380801004800800n,0x804000800800480n,0x184800200800400n,0x1002100104004882n,0x240186000943n,0x100802040188000n,0x890004020004000n,0x4810080400202000n,0x2c00100008008080n,0x8000805010010n,0x200c010002004040n,0x1001c21011340048n,0x4084146081020004n,0x102002080410200n,0xa004088210200n,0x804200281200n,0x100008008080n,0x110a080081040080n,0x4010002004040n,0x400c08294a100400n,0x12441080410a00n,0x608880f1020240a2n,0x108025004202n,0xa4c401020000d01n,0x19000410000821n,0x4052009120080402n,0x2000884011002n,0x20c100104b2080cn,0xc04104100840022n],this.BishopRelevantBits=[6n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,9n,9n,7n,5n,5n,5n,5n,7n,7n,7n,7n,5n,5n,5n,5n,5n,5n,5n,5n,5n,5n,6n,5n,5n,5n,5n,5n,5n,6n],this.RookRelevantBits=[12n,11n,11n,11n,11n,11n,11n,12n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,11n,10n,10n,10n,10n,10n,10n,11n,12n,11n,11n,11n,11n,11n,11n,12n],this.PRNG_SEED=192085716n,this.boardStates=[],this.TT_Size=2097152,this.TT_Hash=new BigUint64Array(this.TT_Size),this.TT_Depth=new Uint8Array(this.TT_Size),this.TT_Move=new Uint16Array(this.TT_Size),this.TT_Score=new Int16Array(this.TT_Size),this.TT_Flag=new Uint8Array(this.TT_Size),this.TTSize=BigInt(2097152),this.TTUsed=0,this.PawnTableSize=262144,this.PawnTableSize_Index=BigInt(this.PawnTableSize),this.PawnTable_Hash=new BigUint64Array(this.PawnTableSize),this.PawnTable_MGScore=new Int16Array(this.PawnTableSize),this.PawnTable_EGScore=new Int16Array(this.PawnTableSize),this.PawnTable_STM=new Uint8Array(this.PawnTableSize),this.PST=[[[0,0,0,0,0,0,0,0,43,42,29,35,18,19,2,17,-9,1,-2,21,3,49,16,-10,-24,-22,-21,-6,3,-13,-10,-19,-29,-25,-21,-5,-9,-7,15,-14,-31,-27,-26,-20,-16,-12,44,-1,-35,-30,-36,-34,-32,9,54,-9,0,0,0,0,0,0,0,0],[-39,-4,-4,-5,6,-4,1,-29,-24,-13,10,30,33,37,-14,3,-13,12,17,46,43,75,34,13,-6,-4,12,27,0,48,2,33,-17,3,7,-1,9,9,-1,-15,-27,-14,-6,-8,3,-9,10,-37,-30,-26,-24,-9,-8,-15,-13,-8,-20,-18,-30,-34,-23,-16,-23,-28],[-12,-15,-8,-4,-9,-6,-1,-5,-16,-5,7,-3,10,0,-5,-3,-4,2,14,26,26,80,36,36,-21,-14,7,25,14,-6,-9,-4,-9,2,-8,24,11,-1,-7,-17,-10,0,-2,-7,-3,0,5,1,-26,-7,2,-10,-12,-3,14,12,-21,-7,-14,-28,-13,-30,-10,-20],[3,-1,8,25,21,20,16,19,-32,-22,0,19,20,31,36,18,-35,-20,-11,2,25,30,13,7,-33,-32,-25,-3,-6,6,11,-6,-36,-33,-43,-17,-8,-8,14,-25,-46,-31,-37,-25,-31,-29,9,-23,-29,-42,-31,-26,-16,7,-13,-33,-20,-35,-33,-24,-20,-10,-50,-10],[-35,-8,4,13,27,25,21,28,-31,-19,-8,12,14,67,54,49,-21,-13,-16,21,46,69,71,37,-18,-12,-8,1,7,18,3,-1,-10,-9,-19,-17,-11,-4,6,-13,-30,-1,-14,-13,-19,-13,5,-13,-31,-15,-13,-2,-2,-3,-18,-26,-18,-34,-30,1,-19,-32,-18,-9],[-1,1,0,2,0,2,1,-1,-1,3,4,2,5,5,6,2,0,2,4,6,8,11,9,5,-2,1,4,1,2,6,-1,-3,-1,1,-4,-4,3,-17,-17,-32,-3,-7,-11,-21,-21,-16,-21,-24,-5,-2,-8,-50,-32,-56,33,53,-7,-22,-4,-52,32,-50,61,53]],[[0,0,0,0,0,0,0,0,69,70,60,35,40,40,55,67,43,45,25,-16,4,4,38,39,12,-2,-16,-42,-34,-22,-10,-7,-3,-13,-25,-38,-35,-30,-25,-29,-15,-18,-26,-25,-26,-23,-40,-34,-1,-5,-8,-50,-16,-10,-23,-29,0,0,0,0,0,0,0,0],[-30,-5,-4,-2,3,-1,0,-19,-21,-6,17,26,13,-1,-13,-16,-15,12,30,30,30,19,-3,-14,-7,9,31,47,37,23,22,-9,-9,0,36,29,37,15,1,-5,-30,-3,10,22,13,10,-18,-17,-14,-8,-9,9,-12,-10,-12,-14,-18,-69,-26,-8,-12,-16,-49,-26],[-6,-14,-1,1,2,3,7,-6,2,4,0,4,6,13,2,-26,-5,11,15,-3,20,37,18,3,-6,25,20,33,22,24,16,-8,-7,-2,38,27,22,12,-5,-20,-23,3,26,22,27,11,-12,-13,-20,-31,-15,1,3,-8,-11,-19,-20,-34,-50,-11,-23,-35,-8,-21],[10,21,21,20,23,24,24,26,29,31,28,26,19,9,22,9,27,19,20,10,6,15,23,9,14,17,22,8,-6,13,4,-4,-4,1,21,5,-10,-8,-5,-18,-8,-14,1,-6,-11,-11,-21,-29,-23,-27,-12,-16,-21,-32,-15,-27,-15,-2,6,-1,-7,-14,-7,-72],[-13,3,15,11,21,27,11,19,-22,-9,10,10,30,39,29,11,-31,-15,-5,4,36,50,36,13,-27,-8,2,25,32,33,25,16,-39,-10,1,46,21,18,4,13,-17,-36,2,-2,21,10,3,-8,-16,-13,-17,-33,-28,-26,-12,-11,-20,-22,-18,-65,-16,-28,-16,-7],[-17,-5,-1,-1,1,8,4,-8,-6,16,18,10,19,27,31,4,3,26,25,27,33,47,41,21,-12,27,26,30,29,45,34,4,-17,-6,15,19,21,19,12,-20,-19,-6,4,11,11,3,-8,-20,-20,-13,-14,0,1,5,-20,-44,-19,-29,-17,-20,-85,-26,-57,-79]]],this.MGPieceValue=[69,260,270,352,905,15e3],this.EGPieceValue=[122,287,322,548,947,15e3],this.MGKnightOutpost=7,this.EGKnightOutpost=16,this.MGRookOpenFileBonus=40,this.MGRookSemiOpenFileBonus=18,this.MGBishopPair=5,this.EGBishopPair=53,this.PawnDuoMulti=[0,-5,10,32,78,44,27],this.PawnSupportMulti=[0,0,22,17,25,43,31],this.MGDoubledPawn=17,this.EGDoubledPawn=17,this.MGIsolatedPawn=9,this.EGIsolatedPawn=0,this.MGPassedPawnRank=[0,7,-3,-17,8,26,70],this.EGPassedPawnRank=[0,-2,10,43,64,82,90],this.MGCorneredBishopPenalty=3,this.EGCorneredBishopPenalty=55,this.CenterDistance=[3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,3,3,2,1,1,1,1,2,3,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,3,2,1,1,1,1,2,3,3,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3],this.CenterManhattanDistance=[6,5,4,3,3,4,5,6,5,4,3,2,2,3,4,5,4,3,2,1,1,2,3,4,3,2,1,0,0,1,2,3,3,2,1,0,0,1,2,3,4,3,2,1,1,2,3,4,5,4,3,2,2,3,4,5,6,5,4,3,3,4,5,6],this.INFINITY=6e4,this.MATE=3e4,this.MAXPLY=100,this.ABORTEDSCORE=5e5,this.nodesSearched=0,this.pvArray=Array(this.MAXPLY).fill(0).map((()=>Array(this.MAXPLY).fill(0))),this.pvLength=Array(this.MAXPLY).fill(0),this.killerMoves=Array(this.MAXPLY).fill(0).map((()=>Array(2).fill(0))),this.historyMoves=Array(2).fill(0).map((()=>Array(64).fill(0).map((()=>Array(64).fill(0))))),this.counterMoves=Array(64).fill(0).map((()=>Array(64).fill(0))),this.bestMoveScore={move:0,score:-this.INFINITY},this.Timer={timeleft:-1,increment:0,depth:this.MAXPLY,movestogo:0,startTime:0,stopTime:0,movetime:-1,stop:!1,extended:!1},this.totalNodes=0,this.Init(),this.InitHashes()}Reset(){this.BoardHistory.length=0,this.BoardState.PiecesBB=new BigUint64Array(12),this.BoardState.OccupanciesBB=new BigUint64Array(2),this.BoardState.Squares=new Array(64).fill(void 0),this.BoardState.SideToMove=0,this.BoardState.EnPassSq=e.no_sq,this.BoardState.HalfMoves=0,this.BoardState.Ply=0,this.BoardState.PawnHash=0n,this.BoardState.Phase=this.PhaseTotal,this.BoardState.CastlingRights=0,this.BoardState.CastlingPaths=[],this.BoardState.CastlingRookSquares=[],this.BoardState.CastlingSquaresMask=new Array(64).fill(15),this.ResizeTranspositionTable(32),this.ResizePawnTable(4),this.nodesSearched=0,this.pvArray=Array(this.MAXPLY).fill(0).map((()=>Array(this.MAXPLY).fill(0))),this.pvLength=Array(this.MAXPLY).fill(0),this.killerMoves=Array(this.MAXPLY).fill(0).map((()=>Array(2).fill(0))),this.historyMoves=Array(2).fill(0).map((()=>Array(64).fill(0).map((()=>Array(64).fill(0))))),this.counterMoves=Array(64).fill(0).map((()=>Array(64).fill(0)))}Random64(){let e=this.PRNG_SEED;return e^=e>>12n,e^=BigInt.asUintN(64,e<<25n),e^=e>>27n,this.PRNG_SEED=e,BigInt.asUintN(64,2685821657736338717n*e)}FindMagics(t){const a=new BigUint64Array(4096),s=new BigUint64Array(4096),n=2===t;for(let t=e.a8;t<=e.h1;t++){let e=0n;const i=n?this.GenerateBishopMasks(t):this.GenerateRookMasks(t),o=n?this.BishopRelevantBits[t]:this.RookRelevantBits[t],h=Number(this.CountBits(i));for(let e=0;e<1<<h;e++)a[e]=this.SetOccupancy(e,h,i),s[e]=n?this.GenerateBishopAttacksFly(t,a[e]):this.GenerateRookAttacksFly(t,a[e]);for(;;){if(e=BigInt.asUintN(64,this.Random64()&this.Random64()&this.Random64()),this.CountBits(0xff00000000000000n&BigInt.asUintN(64,i*e))<6)continue;const n=new BigUint64Array(4096);let r=!1;for(let t=0;t<1<<h;t++){const i=Number(BigInt.asUintN(64,a[t]*e)>>64n-o);if(0n===n[i])n[i]=s[t];else if(n[i]!==s[t]){r=!0;break}}if(!r){console.log(`Square: ${t} magic: 0x${e.toString(16)}`);break}}}}SetBit(e,t){return e|1n<<this.SquareBigInt[t]}RemoveBit(e,t){return e&~(1n<<this.SquareBigInt[t])}GetBit(e,t){return e&1n<<this.SquareBigInt[t]}CountBits(e){const t=Number(0xffffffffn&e),a=Number(e>>32n);function s(e){return 16843009*((e=(858993459&(e-=e>>1&1431655765))+(e>>2&858993459))+(e>>4)&252645135)>>24}return s(t)+s(a)}GetLS1B(e){return this.CountBits((e&-e)-1n)}SetOccupancy(e,t,a){let s=0n;for(let n=0;n<t;n++){const t=this.GetLS1B(a);a=this.RemoveBit(a,t),e&1<<n&&(s|=1n<<this.SquareBigInt[t])}return BigInt.asUintN(64,s)}Shift(e,t){switch(t){case 8:return e>>8n;case-8:return BigInt.asUintN(64,e<<8n);case 1:return(e&this.notHFile)<<1n;case-1:return(e&this.notAFile)>>1n;case 9:return(e&this.notAFile)>>9n;case 7:return(e&this.notHFile)>>7n;case-9:return(e&this.notHFile)<<9n;case-7:return(e&this.notAFile)<<7n}}Fill(e,t){let a=this.squareBB[t];return 8===e?(a|=a>>8n,a|=a>>16n,a|=a>>32n):(a|=a<<8n,a|=a<<16n,a|=a<<32n),this.Shift(a,e)}Init(){const t=-1n,a=0x0001010101010100n,s=0x0040201008040200n,n=0x0002040810204080n;let i,o,h,r;for(let c=e.a8;c<=e.h1;c++){this.squareBB[c]=this.SetBit(0n,c),this.rankMasks[c]=0xffn<<(56n&BigInt(c)),this.fileMasks[c]=0x0101010101010101n<<(7n&BigInt(c)),this.isolatedMasks[c]=(this.fileMasks[c]&this.notHFile)<<1n|(this.fileMasks[c]&this.notAFile)>>1n,this.PawnAttacks[c]=this.MaskPawnAttacks(0,c),this.PawnAttacks[c+64]=this.MaskPawnAttacks(1,c),this.KnightAttacks[c]=this.MaskKnightAttacks(c),this.KingAttacks[c]=this.MaskKingAttacks(c),this.BishopMasks[c]=this.GenerateBishopMasks(c);let e=this.CountBits(this.BishopMasks[c]),d=1<<e;for(let t=0;t<d;t++){const a=this.SetOccupancy(t,e,this.BishopMasks[c]),s=BigInt.asUintN(64,a*this.BishopMagicNumbers[c])>>64n-this.BishopRelevantBits[c];this.BishopAttacks[c][Number(s)]=this.GenerateBishopAttacksFly(c,a)}this.RookMasks[c]=this.GenerateRookMasks(c),e=this.CountBits(this.RookMasks[c]),d=1<<e;for(let t=0;t<d;t++){const a=this.SetOccupancy(t,e,this.RookMasks[c]),s=BigInt.asUintN(64,a*this.RookMagicNumbers[c])>>64n-this.RookRelevantBits[c];this.RookAttacks[c][Number(s)]=this.GenerateRookAttacksFly(c,a)}this.attackRays[0][c]=this.GenerateBishopAttacks(0n,c),this.attackRays[2][c]|=this.attackRays[0][c],this.attackRays[1][c]=this.GenerateRookAttacks(0n,c),this.attackRays[2][c]|=this.attackRays[1][c];let f=this.fileMasks[c]|(this.fileMasks[c]&this.notAFile)>>1n|(this.fileMasks[c]&this.notHFile)<<1n;this.passedMasks[0][c]=f,this.passedMasks[1][56^c]=f;for(let e=0;e<64;e++){const d=c>>3,f=e>>3,b=7&c,x=7&e;this.distanceBetween[c][e]=Math.max(Math.abs(f-d),Math.abs(x-b)),i=t<<BigInt(c)^t<<BigInt(e),r=(7n&BigInt(e))-(7n&BigInt(c)),h=(7n|BigInt(e))-BigInt(c)>>3n,o=(7n&r)-1n&a,o+=2n*((7n&h)-1n>>58n),o+=(h-r&15n)-1n&s,o+=(h+r&15n)-1n&n,o*=i&-i,this.betweenMasks[c][e]=BigInt.asUintN(64,o&i)}}for(let t=e.a8;t<=e.h1;t++){for(let a=t;a<=e.h1;a+=8)this.passedMasks[0][t]&=~this.rankMasks[a];for(let a=t;a>=e.a8;a-=8)this.passedMasks[1][56^t]&=~this.rankMasks[a]}}InitHashes(){for(let t=0;t<=5;t++)for(let a=e.a8;a<=e.h1;a++)this.Zobrist.Pieces[0][t][a]=this.Random64(),this.Zobrist.Pieces[1][t][a]=this.Random64();for(let t=e.a8;t<=e.h1;t++)this.Zobrist.EnPassant[t]=this.Random64();for(let e=0;e<16;e++)this.Zobrist.Castle[e]=this.Random64();this.Zobrist.SideToMove=this.Random64()}GenerateHashes(){let t=0n,a=0n;for(let s=e.a8;s<=e.h1;s++){const e=this.BoardState.Squares[s];e&&(t^=this.Zobrist.Pieces[e.Color][e.Type][s],0===e.Type&&(a^=this.Zobrist.Pieces[e.Color][0][s]))}return this.BoardState.EnPassSq!==e.no_sq&&(t^=this.Zobrist.EnPassant[this.BoardState.EnPassSq]),t^=this.Zobrist.Castle[this.BoardState.CastlingRights],1===this.BoardState.SideToMove&&(t^=this.Zobrist.SideToMove),{hash:t,pawnHash:a}}MaskPawnAttacks(e,t){let a=0n,s=0n;return s=this.SetBit(s,t),e?(s<<7n&this.notHFile&&(a|=s<<7n),s<<9n&this.notAFile&&(a|=s<<9n)):(s>>7n&this.notAFile&&(a|=s>>7n),s>>9n&this.notHFile&&(a|=s>>9n)),BigInt.asUintN(64,a)}MaskKnightAttacks(e){let t=0n,a=0n;return a=this.SetBit(a,e),a>>17n&this.notHFile&&(t|=a>>17n),a>>15n&this.notAFile&&(t|=a>>15n),a>>10n&this.notHGFile&&(t|=a>>10n),a>>6n&this.notABFile&&(t|=a>>6n),a<<17n&this.notAFile&&(t|=a<<17n),a<<15n&this.notHFile&&(t|=a<<15n),a<<10n&this.notABFile&&(t|=a<<10n),a<<6n&this.notHGFile&&(t|=a<<6n),BigInt.asUintN(64,t)}MaskKingAttacks(e){let t=0n,a=0n;return a=this.SetBit(a,e),a>>8n&&(t|=a>>8n),a>>9n&this.notHFile&&(t|=a>>9n),a>>7n&this.notAFile&&(t|=a>>7n),a>>1n&this.notHFile&&(t|=a>>1n),a<<8n&&(t|=a<<8n),a<<9n&this.notAFile&&(t|=a<<9n),a<<7n&this.notHFile&&(t|=a<<7n),a<<1n&this.notAFile&&(t|=a<<1n),BigInt.asUintN(64,t)}GenerateBishopMasks(e){let t=0n;const a=Math.floor(e/8),s=e%8;for(let e=a+1,n=s+1;e<=6&&n<=6;e++,n++)t|=1n<<8n*BigInt(e)+BigInt(n);for(let e=a-1,n=s+1;e>=1&&n<=6;e--,n++)t|=1n<<8n*BigInt(e)+BigInt(n);for(let e=a+1,n=s-1;e<=6&&n>=1;e++,n--)t|=1n<<8n*BigInt(e)+BigInt(n);for(let e=a-1,n=s-1;e>=1&&n>=1;e--,n--)t|=1n<<8n*BigInt(e)+BigInt(n);return BigInt.asUintN(64,t)}GenerateBishopAttacksFly(e,t){let a=0n;const s=Math.floor(e/8),n=e%8;for(let e=s+1,i=n+1;e<=7&&i<=7&&(a|=1n<<8n*BigInt(e)+BigInt(i),!(1n<<8n*BigInt(e)+BigInt(i)&t));e++,i++);for(let e=s-1,i=n+1;e>=0&&i<=7&&(a|=1n<<8n*BigInt(e)+BigInt(i),!(1n<<8n*BigInt(e)+BigInt(i)&t));e--,i++);for(let e=s+1,i=n-1;e<=7&&i>=0&&(a|=1n<<8n*BigInt(e)+BigInt(i),!(1n<<8n*BigInt(e)+BigInt(i)&t));e++,i--);for(let e=s-1,i=n-1;e>=0&&i>=0&&(a|=1n<<8n*BigInt(e)+BigInt(i),!(1n<<8n*BigInt(e)+BigInt(i)&t));e--,i--);return BigInt.asUintN(64,a)}GenerateRookMasks(e){let t=0n;const a=Math.floor(e/8),s=e%8;for(let e=a+1;e<=6;e++)t|=1n<<8n*BigInt(e)+BigInt(s);for(let e=a-1;e>=1;e--)t|=1n<<8n*BigInt(e)+BigInt(s);for(let e=s+1;e<=6;e++)t|=1n<<8n*BigInt(a)+BigInt(e);for(let e=s-1;e>=1;e--)t|=1n<<8n*BigInt(a)+BigInt(e);return BigInt.asUintN(64,t)}GenerateRookAttacksFly(e,t){let a=0n;const s=Math.floor(e/8),n=e%8;for(let e=s+1;e<=7&&(a|=1n<<8n*BigInt(e)+BigInt(n),!(1n<<8n*BigInt(e)+BigInt(n)&t));e++);for(let e=s-1;e>=0&&(a|=1n<<8n*BigInt(e)+BigInt(n),!(1n<<8n*BigInt(e)+BigInt(n)&t));e--);for(let e=n+1;e<=7&&(a|=1n<<8n*BigInt(s)+BigInt(e),!(1n<<8n*BigInt(s)+BigInt(e)&t));e++);for(let e=n-1;e>=0&&(a|=1n<<8n*BigInt(s)+BigInt(e),!(1n<<8n*BigInt(s)+BigInt(e)&t));e--);return BigInt.asUintN(64,a)}EncodeMove(e,t,a){return(15&a)<<12|(63&e)<<6|63&t}MoveType(e){return e>>12&15}HasFlag(e,t){return 0!=(e>>12&t)}IsCapture(e){return 0!=(e>>12&4)}IsPromotion(e){return 0!=(e>>12&8)}MoveTo(e){return 63&e}MoveFrom(e){return e>>6&63}IsCastle(e){return 2===this.MoveType(e)||3===this.MoveType(e)}StringifyMove(t){const a=this.MoveFrom(t);let s=this.MoveTo(t);const n=this.MoveType(t);this.IsCastle(t)&&!this.isChess960&&(s=s>a?s-1:s+2);let i=`${e[a]}${e[s]}`;return this.HasFlag(t,8)&&(8!==n&&12!==n||(i+="n"),9!==n&&13!==n||(i+="b"),10!==n&&14!==n||(i+="r"),11!==n&&15!==n||(i+="q")),i}GenerateBishopAttacks(e,t){return e=BigInt.asUintN(64,(e&this.BishopMasks[t])*this.BishopMagicNumbers[t]),e>>=64n-this.BishopRelevantBits[t],this.BishopAttacks[t][Number(e)]}GenerateRookAttacks(e,t){return e=BigInt.asUintN(64,(e&this.RookMasks[t])*this.RookMagicNumbers[t]),e>>=64n-this.RookRelevantBits[t],this.RookAttacks[t][Number(e)]}GeneratePawnMoves(t=!1){const a=[],s=this.BoardState.SideToMove,n=this.BoardState.PiecesBB[0+6*s],i=~(this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1]),o=this.BoardState.OccupanciesBB[1^s];let h=this.rankMasks[e.a3],r=8,c=9,d=7,f=~this.rankMasks[e.a8];if(1===s&&(h=this.rankMasks[e.a6],r=-8,c=-9,d=-7,f=~this.rankMasks[e.a1]),!t){let e=this.Shift(n,r)&i&f,t=this.Shift(e&h,r)&i;for(;e;){const t=this.GetLS1B(e);e=this.RemoveBit(e,t),a.push(this.EncodeMove(t+r,t,0))}for(;t;){const e=this.GetLS1B(t);t=this.RemoveBit(t,e),a.push(this.EncodeMove(e+2*r,e,0))}}let b=this.Shift(n,d)&o,x=this.Shift(n,c)&o;for(;b;){const t=this.GetLS1B(b);b=this.RemoveBit(b,t),0===s&&t<=e.h8||1===s&&t>=e.a1?a.push(this.EncodeMove(t+d,t,12),this.EncodeMove(t+d,t,13),this.EncodeMove(t+d,t,14),this.EncodeMove(t+d,t,15)):a.push(this.EncodeMove(t+d,t,4))}for(;x;){const t=this.GetLS1B(x);x=this.RemoveBit(x,t),0===s&&t<=e.h8||1===s&&t>=e.a1?a.push(this.EncodeMove(t+c,t,12),this.EncodeMove(t+c,t,13),this.EncodeMove(t+c,t,14),this.EncodeMove(t+c,t,15)):a.push(this.EncodeMove(t+c,t,4))}let B=this.Shift(n,r)&i&~f;for(;B;){const e=this.GetLS1B(B);B=this.RemoveBit(B,e),a.push(this.EncodeMove(e+r,e,8),this.EncodeMove(e+r,e,9),this.EncodeMove(e+r,e,10),this.EncodeMove(e+r,e,11))}if(this.BoardState.EnPassSq!==e.no_sq&&this.PawnAttacks[this.BoardState.EnPassSq+64*(1^this.BoardState.SideToMove)]&n){let e=this.Shift(n,d)&this.squareBB[this.BoardState.EnPassSq],t=this.Shift(n,c)&this.squareBB[this.BoardState.EnPassSq];for(;e;){const t=this.GetLS1B(e);e=this.RemoveBit(e,t),a.push(this.EncodeMove(t+d,t,5))}for(;t;){const e=this.GetLS1B(t);t=this.RemoveBit(t,e),a.push(this.EncodeMove(e+c,e,5))}}return a}GenerateMoves(t=!1){const a=[],s=this.BoardState.OccupanciesBB[1^this.BoardState.SideToMove],n=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1],i=~n;let o=this.BoardState.OccupanciesBB[this.BoardState.SideToMove]&~this.BoardState.PiecesBB[0+6*this.BoardState.SideToMove];for(a.push(...this.GeneratePawnMoves(t));o;){const e=this.GetLS1B(o);o=this.RemoveBit(o,e);let h=0n;switch(this.BoardState.Squares[e].Type){case 1:h=this.KnightAttacks[e];break;case 2:h=this.GenerateBishopAttacks(n,e);break;case 3:h=this.GenerateRookAttacks(n,e);break;case 4:h=this.GenerateBishopAttacks(n,e)|this.GenerateRookAttacks(n,e);break;case 5:h=this.KingAttacks[e];break;default:throw new Error("Invalid piece in move gen.")}if(!t){let t=h&i;for(;t;){const s=this.GetLS1B(t);t=this.RemoveBit(t,s),a.push(this.EncodeMove(e,s,0))}}let r=h&s;for(;r;){const t=this.GetLS1B(r);r=this.RemoveBit(r,t),a.push(this.EncodeMove(e,t,4))}}if(!t){const t=this.GetLS1B(this.BoardState.PiecesBB[5+6*this.BoardState.SideToMove]);this.IsSquareAttacked(t,1^this.BoardState.SideToMove)||(0===this.BoardState.SideToMove?(1&this.BoardState.CastlingRights&&0n===(this.BoardState.CastlingPaths[1]&n)&&!this.IsPathAttacked(this.betweenMasks[t][e.h1])&&a.push(this.EncodeMove(t,this.BoardState.CastlingRookSquares[1],2)),2&this.BoardState.CastlingRights&&0n===(this.BoardState.CastlingPaths[2]&n)&&!this.IsPathAttacked(this.betweenMasks[t][e.c1])&&a.push(this.EncodeMove(t,this.BoardState.CastlingRookSquares[2],3))):(4&this.BoardState.CastlingRights&&0n===(this.BoardState.CastlingPaths[4]&n)&&!this.IsPathAttacked(this.betweenMasks[t][e.h8])&&a.push(this.EncodeMove(t,this.BoardState.CastlingRookSquares[4],2)),8&this.BoardState.CastlingRights&&0n===(this.BoardState.CastlingPaths[8]&n)&&!this.IsPathAttacked(this.betweenMasks[t][e.c8])&&a.push(this.EncodeMove(t,this.BoardState.CastlingRookSquares[8],3))))}return a}ScoreMoves(e,t,a){let s=[];for(let n=0;n<e.length;n++){const i=e[n],o=this.MoveFrom(i),h=this.MoveTo(i);if(i===t)s.push({move:t,score:this.INFINITY});else if(this.IsCapture(i)){const e=this.BoardState.Squares[o],t=this.BoardState.Squares[h]??{Type:0,Color:0};s.push({move:i,score:this.MGPieceValue[t.Type]-e.Type+1e4})}else i===this.killerMoves[this.BoardState.Ply][0]?s.push({move:i,score:9e3}):i===this.killerMoves[this.BoardState.Ply][1]?s.push({move:i,score:8e3}):i===this.counterMoves[this.MoveFrom(a)][this.MoveTo(a)]?s.push({move:i,score:7e3}):s.push({move:i,score:this.historyMoves[this.BoardState.SideToMove][o][h]})}return s}NextMove(e,t){let a=t;for(let s=t;s<e.length;s++)e[s].score>e[a].score&&(a=s);const s=e[t];return e[t]=e[a],e[a]=s,e[t++]}AttacksToByColor(e,t){const a=this.BoardState.PiecesBB[0+6*t]&this.PawnAttacks[e+64*(1^t)],s=this.BoardState.PiecesBB[1+6*t]&this.KnightAttacks[e],n=this.BoardState.PiecesBB[5+6*t]&this.KingAttacks[e],i=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1];let o=this.BoardState.PiecesBB[2+6*t]|this.BoardState.PiecesBB[4+6*t];o&=this.GenerateBishopAttacks(i,e);let h=this.BoardState.PiecesBB[3+6*t]|this.BoardState.PiecesBB[4+6*t];return h&=this.GenerateRookAttacks(i,e),a|s|n|o|h}AttackedSquares(e,t){const a=this.BoardState.PiecesBB[0+6*e];let s=this.BoardState.OccupanciesBB[e]&~a,n=9,i=7;1===e&&(n=-9,i=-7);let o=this.Shift(a,n)|this.Shift(a,i);for(;s;){const e=this.GetLS1B(s);switch(s=this.RemoveBit(s,e),this.BoardState.Squares[e].Type){case 1:o|=this.KnightAttacks[e];break;case 2:o|=this.GenerateBishopAttacks(t,e);break;case 3:o|=this.GenerateRookAttacks(t,e);break;case 4:o|=this.GenerateBishopAttacks(t,e)|this.GenerateRookAttacks(t,e);break;case 5:o|=this.KingAttacks[e];break;default:throw new Error("Invalid piece in move gen.")}}return o}PlacePiece(e,t,a){this.BoardState.PiecesBB[e+6*t]=this.SetBit(this.BoardState.PiecesBB[e+6*t],a),this.BoardState.OccupanciesBB[t]=this.SetBit(this.BoardState.OccupanciesBB[t],a),this.BoardState.Squares[a]={Type:e,Color:t}}RemovePiece(e,t,a){this.BoardState.PiecesBB[e+6*t]=this.RemoveBit(this.BoardState.PiecesBB[e+6*t],a),this.BoardState.OccupanciesBB[t]=this.RemoveBit(this.BoardState.OccupanciesBB[t],a),this.BoardState.Squares[a]=void 0}MovePiece(e,t,a){const s=this.squareBB[t]|this.squareBB[a];this.BoardState.PiecesBB[e.Type+6*e.Color]^=s,this.BoardState.OccupanciesBB[e.Color]^=s,this.BoardState.Squares[t]=void 0,this.BoardState.Squares[a]=e}DoCastle(t,a,s){const n=s>a;let i=e.g1^56*t.Color,o=e.f1^56*t.Color;n||(i=e.c1^56*t.Color,o=e.d1^56*t.Color);const h=s;this.RemovePiece(3,t.Color,h),this.RemovePiece(t.Type,t.Color,a),this.PlacePiece(3,t.Color,o),this.PlacePiece(t.Type,t.Color,i),this.BoardState.Hash^=this.Zobrist.Pieces[t.Color][3][h]^this.Zobrist.Pieces[t.Color][3][o]^this.Zobrist.Pieces[t.Color][5][i]^this.Zobrist.Pieces[t.Color][5][a]}UndoCastle(t,a){const s=this.BoardState.SideToMove,n=a>t;let i=e.g1^56*s,o=e.f1^56*s;n||(i=e.c1^56*s,o=e.d1^56*s);const h=a;this.RemovePiece(3,s,o),this.RemovePiece(5,s,i),this.PlacePiece(3,s,h),this.PlacePiece(5,s,t)}MakeMove(t){const a=this.MoveFrom(t),s=this.MoveTo(t),n=this.MoveType(t),i=this.BoardState.Squares[a];let o=5===n?{Type:0,Color:1^this.BoardState.SideToMove}:this.BoardState.Squares[s];if(this.boardStates.push({CastlingRights:this.BoardState.CastlingRights,EnPassSq:this.BoardState.EnPassSq,Captured:o,Hash:this.BoardState.Hash,PawnHash:this.BoardState.PawnHash,HalfMoves:this.BoardState.HalfMoves,Phase:this.BoardState.Phase}),this.BoardState.Ply++,this.BoardState.HalfMoves++,this.BoardState.EnPassSq!==e.no_sq&&(this.BoardState.Hash^=this.Zobrist.EnPassant[this.BoardState.EnPassSq],this.BoardState.EnPassSq=e.no_sq),this.IsCastle(t))this.DoCastle(i,a,s);else{let e=0===i.Color?8:-8;if(void 0!==o){let t=s;5===n&&(t=s+e),this.RemovePiece(o.Type,o.Color,t),this.BoardState.HalfMoves=0,this.BoardState.Hash^=this.Zobrist.Pieces[o.Color][o.Type][t],this.BoardState.Phase+=this.PhaseValues[o.Type],0===o.Type&&(this.BoardState.PawnHash^=this.Zobrist.Pieces[o.Color][o.Type][t])}if(this.MovePiece(i,a,s),this.BoardState.Hash^=this.Zobrist.Pieces[i.Color][i.Type][a]^this.Zobrist.Pieces[i.Color][i.Type][s],0===i.Type)if(this.BoardState.HalfMoves=0,this.BoardState.PawnHash^=this.Zobrist.Pieces[i.Color][i.Type][a]^this.Zobrist.Pieces[i.Color][i.Type][s],this.HasFlag(t,8)){let e=0;switch(n){case 8:case 12:e=1;break;case 9:case 13:e=2;break;case 10:case 14:e=3;break;case 11:case 15:e=4}const t={Type:e,Color:i.Color};this.RemovePiece(i.Type,i.Color,s),this.PlacePiece(t.Type,t.Color,s),this.BoardState.Phase+=this.PhaseValues[0],this.BoardState.Phase-=this.PhaseValues[t.Type],this.BoardState.Hash^=this.Zobrist.Pieces[i.Color][i.Type][s]^this.Zobrist.Pieces[t.Color][t.Type][s],this.BoardState.PawnHash^=this.Zobrist.Pieces[i.Color][i.Type][s]}else 16==(s^a)&&(this.BoardState.EnPassSq=s+e,this.BoardState.Hash^=this.Zobrist.EnPassant[this.BoardState.EnPassSq])}return this.BoardState.Hash^=this.Zobrist.Castle[this.BoardState.CastlingRights],this.BoardState.CastlingRights&=this.BoardState.CastlingSquaresMask[a]&this.BoardState.CastlingSquaresMask[s],this.BoardState.Hash^=this.Zobrist.Castle[this.BoardState.CastlingRights],this.BoardState.SideToMove^=1,this.BoardState.Hash^=this.Zobrist.SideToMove,this.BoardHistory[this.BoardHistory.length]=this.BoardState.Hash,!this.IsSquareAttacked(this.GetLS1B(this.BoardState.PiecesBB[5+6*(1^this.BoardState.SideToMove)]),this.BoardState.SideToMove)}UnmakeMove(e){const t=this.boardStates.pop();this.BoardState.Ply--,this.BoardHistory.pop(),this.BoardState.CastlingRights=t.CastlingRights,this.BoardState.EnPassSq=t.EnPassSq,this.BoardState.HalfMoves=t.HalfMoves,this.BoardState.Phase=t.Phase,this.BoardState.SideToMove^=1;const a=this.MoveFrom(e),s=this.MoveTo(e),n=this.BoardState.Squares[s];if(this.IsCastle(e))this.UndoCastle(a,s);else if(this.HasFlag(e,8))this.RemovePiece(n.Type,n.Color,s),this.PlacePiece(0,n.Color,a),t.Captured&&this.PlacePiece(t.Captured.Type,t.Captured.Color,s);else if(this.MovePiece(n,s,a),t.Captured){let a=s,i=t.Captured;5===this.MoveType(e)&&(a=0===n.Color?s+8:s-8),this.PlacePiece(i.Type,i.Color,a)}this.BoardState.Hash=t.Hash,this.BoardState.PawnHash=t.PawnHash}MakeNullMove(){this.boardStates.push({CastlingRights:this.BoardState.CastlingRights,EnPassSq:this.BoardState.EnPassSq,Hash:this.BoardState.Hash,HalfMoves:this.BoardState.HalfMoves,PawnHash:this.BoardState.PawnHash,Phase:this.BoardState.Phase}),this.BoardState.EnPassSq!==e.no_sq&&(this.BoardState.Hash^=this.Zobrist.EnPassant[this.BoardState.EnPassSq],this.BoardState.EnPassSq=e.no_sq),this.BoardState.HalfMoves=0,this.BoardState.SideToMove^=1,this.BoardState.Hash^=this.Zobrist.SideToMove,this.BoardState.Ply++}UnmakeNullMove(){const e=this.boardStates.pop();this.BoardState.CastlingRights=e.CastlingRights,this.BoardState.EnPassSq=e.EnPassSq,this.BoardState.HalfMoves=e.HalfMoves,this.BoardState.SideToMove^=1,this.BoardState.Hash=e.Hash,this.BoardState.PawnHash=e.PawnHash,this.BoardState.Ply--,this.BoardState.Phase=e.Phase}IsSquareAttacked(e,t){if(this.PawnAttacks[e+64*(1^t)]&this.BoardState.PiecesBB[0+6*t])return!0;if(this.KnightAttacks[e]&this.BoardState.PiecesBB[1+6*t])return!0;const a=this.BoardState.PiecesBB[4+6*t],s=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1],n=this.BoardState.PiecesBB[2+6*t]|a;if(this.attackRays[0][e]&n&&this.GenerateBishopAttacks(s,e)&n)return!0;const i=this.BoardState.PiecesBB[3+6*t]|a;return!!(this.attackRays[1][e]&i&&this.GenerateRookAttacks(s,e)&i)||!!(this.KingAttacks[e]&this.BoardState.PiecesBB[5+6*t])}IsPathAttacked(e){let t=!1;for(;e;){const a=this.GetLS1B(e);if(e=this.RemoveBit(e,a),this.IsSquareAttacked(a,1^this.BoardState.SideToMove)){t=!0;break}}return t}ResizeTranspositionTable(e){this.TT_Size=1024*e*1024/16,this.TT_Hash=new BigUint64Array(this.TT_Size),this.TT_Depth=new Uint8Array(this.TT_Size),this.TT_Move=new Uint16Array(this.TT_Size),this.TT_Score=new Int16Array(this.TT_Size),this.TT_Flag=new Uint8Array(this.TT_Size),this.TTSize=BigInt(this.TT_Size),this.TTUsed=0}StoreEntry(e,t,a,s,n){const i=Number(e%this.TTSize);0n===this.TT_Hash[i]&&this.TTUsed++,this.TT_Hash[i]=e,this.TT_Depth[i]=t,this.TT_Move[i]=a,this.TT_Score[i]=s,this.TT_Flag[i]=n}GetEntry(e){const t=Number(e%this.TTSize),a=this.TT_Hash[t];return a!==e?null:{Hash:a,Move:this.TT_Move[t],Depth:this.TT_Depth[t],Score:this.TT_Score[t],Flag:this.TT_Flag[t]}}ResizePawnTable(e){this.PawnTableSize=1024*e*1024/16,this.PawnTableSize_Index=BigInt(this.PawnTableSize),this.PawnTable_Hash=new BigUint64Array(this.PawnTableSize),this.PawnTable_MGScore=new Int16Array(this.PawnTableSize),this.PawnTable_EGScore=new Int16Array(this.PawnTableSize),this.PawnTable_STM=new Uint8Array(this.PawnTableSize)}StorePawnHash(e,t,a,s){const n=Number(e%this.PawnTableSize_Index);this.PawnTable_Hash[n]=e,this.PawnTable_MGScore[n]=t,this.PawnTable_EGScore[n]=a,this.PawnTable_STM[n]=s}GetPawnEntry(e){const t=Number(e%this.PawnTableSize_Index),a=this.PawnTable_Hash[t];return a!==e?null:{Hash:a,Mg:this.PawnTable_MGScore[t],Eg:this.PawnTable_EGScore[t],SideToMove:this.PawnTable_STM[t]}}Evaluate(){let t=[0,0],a=[0,0],s=this.BoardState.Phase,n=(this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1])&~(this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6]);const i=[0,0];if(0n===(this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6])){if(this.IsDraw())return 0;let t=[e.no_sq,e.no_sq];for(;n;){let e=this.GetLS1B(n);n=this.RemoveBit(n,e);const s=this.BoardState.Squares[e];a[s.Color]+=this.EGPieceValue[s.Type],5===s.Type&&(t[s.Color]=e)}const s=this.distanceBetween[t[0]][t[1]];return Math.abs(a[0]-a[1])>10?(a[0]>a[1]?a[1]-=50*this.CenterManhattanDistance[t[1]]:a[0]-=50*this.CenterManhattanDistance[t[0]],a[this.BoardState.SideToMove]-a[1^this.BoardState.SideToMove]-35*(7-s)):0}const o=this.EvaluatePawns();for(;n;){let s=this.GetLS1B(n);const o=s;n=this.RemoveBit(n,s);const h=this.BoardState.Squares[s];switch(1===h.Color&&(s^=56),h.Type){case 1:this.PawnAttacks[o+64*(1^h.Color)]&this.BoardState.PiecesBB[0+6*h.Color]&&!(this.PawnAttacks[o+64*h.Color]&this.BoardState.PiecesBB[0+6*(1^h.Color)])&&(t[h.Color]+=this.MGKnightOutpost,a[h.Color]+=this.EGKnightOutpost);break;case 2:if(i[h.Color]++,this.isChess960&&(s===e.a1||s===e.h1)){let e=0==(7&s)?1n<<49n:1n<<54n;1===h.Color&&(e>>=40n),0n!==(e&this.BoardState.PiecesBB[0+6*h.Color])&&(t[h.Color]-=this.MGCorneredBishopPenalty,a[h.Color]-=this.EGCorneredBishopPenalty)}break;case 3:0n===(this.fileMasks[o]&this.BoardState.PiecesBB[0+6*h.Color])&&(0n===(this.fileMasks[o]&this.BoardState.PiecesBB[0+6*(1^h.Color)])?t[h.Color]+=this.MGRookOpenFileBonus:t[h.Color]+=this.MGRookSemiOpenFileBonus)}t[h.Color]+=this.PST[0][h.Type][s]+this.MGPieceValue[h.Type],a[h.Color]+=this.PST[1][h.Type][s]+this.EGPieceValue[h.Type]}i[0]>=2&&(t[0]+=this.MGBishopPair,a[0]+=this.EGBishopPair),i[1]>=2&&(t[1]+=this.MGBishopPair,a[1]+=this.EGBishopPair);const h=t[this.BoardState.SideToMove]-t[1^this.BoardState.SideToMove]+o.opening,r=a[this.BoardState.SideToMove]-a[1^this.BoardState.SideToMove]+o.endgame;return s=(256*s+this.PhaseTotal/2)/this.PhaseTotal|0,(h*(256-s)+r*s)/256|0}EvaluatePawns(){const e=this.GetPawnEntry(this.BoardState.PawnHash);if(e)return e.SideToMove!==this.BoardState.SideToMove?{opening:-1*e.Mg,endgame:-1*e.Eg}:{opening:e.Mg,endgame:e.Eg};let t=[0,0],a=[0,0],s=this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6];for(;s;){let e=this.GetLS1B(s);const n=e;s=this.RemoveBit(s,e);const i=this.BoardState.Squares[e],o=0===i.Color?8-(e>>3):1+(e>>3),h=0===i.Color?8:-8;1===i.Color&&(e^=56),this.Shift(this.squareBB[n],1)&this.BoardState.PiecesBB[0+6*i.Color]&&(a[i.Color]+=this.PawnDuoMulti[o-1]),this.PawnAttacks[n+64*(1^i.Color)]&this.BoardState.PiecesBB[0+6*i.Color]&&(a[i.Color]+=this.PawnSupportMulti[o-1]),0n!==(this.Shift(this.squareBB[n],-1*h)&this.BoardState.PiecesBB[0+6*i.Color])&&(t[i.Color]-=this.MGDoubledPawn,a[i.Color]-=this.EGDoubledPawn),0n===(this.Fill(-1*h,n)&this.BoardState.PiecesBB[0+6*i.Color])&&0n===(this.passedMasks[i.Color][e]&this.BoardState.PiecesBB[0+6*(1^i.Color)])&&(t[i.Color]+=this.MGPassedPawnRank[o-1],a[i.Color]+=this.EGPassedPawnRank[o-1]),0n===(this.isolatedMasks[n]&this.BoardState.PiecesBB[0+6*i.Color])&&(t[i.Color]-=this.MGIsolatedPawn,a[i.Color]-=this.EGIsolatedPawn),t[i.Color]+=this.PST[0][0][e]+this.MGPieceValue[0],a[i.Color]+=this.PST[1][0][e]+this.EGPieceValue[0]}const n=t[this.BoardState.SideToMove]-t[1^this.BoardState.SideToMove],i=a[this.BoardState.SideToMove]-a[1^this.BoardState.SideToMove];return this.StorePawnHash(this.BoardState.PawnHash,n,i,this.BoardState.SideToMove),{opening:n,endgame:i}}IsDraw(){if((this.BoardState.PiecesBB[5]|this.BoardState.PiecesBB[11])==(this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1]))return!0;const e=this.CountBits(this.BoardState.PiecesBB[0])+this.CountBits(this.BoardState.PiecesBB[6]),t=this.CountBits(this.BoardState.PiecesBB[1]),a=this.CountBits(this.BoardState.PiecesBB[7]),s=this.CountBits(this.BoardState.PiecesBB[2]),n=this.CountBits(this.BoardState.PiecesBB[8]),i=t+a+s+n;if(this.CountBits(this.BoardState.PiecesBB[3])+this.CountBits(this.BoardState.PiecesBB[9])+(this.CountBits(this.BoardState.PiecesBB[4])+this.CountBits(this.BoardState.PiecesBB[10]))+e===0){if(1===i)return!0;if(2===i){if(1===t&&1===a)return!0;if(1===s&&1===n)return!0}}return!1}GetPv(){let e="";for(let t=0;t<this.pvLength[0];t++)e+=this.StringifyMove(this.pvArray[0][t])+" ";return e}FormatScore(e){return e<-this.MATE+this.MAXPLY?"mate "+(-this.MATE-e)/2:e>this.MATE-this.MAXPLY?`mate ${Math.round((this.MATE-e+1)/2)}`:"cp "+(0|e)}UpdatePv(e){this.pvArray[this.BoardState.Ply][this.BoardState.Ply]=e;for(let e=this.BoardState.Ply+1;e<this.pvLength[this.BoardState.Ply+1];e++)this.pvArray[this.BoardState.Ply][e]=this.pvArray[this.BoardState.Ply+1][e];this.pvLength[this.BoardState.Ply]=this.pvLength[this.BoardState.Ply+1]}Search(t){this.StartTimer();let a=-this.INFINITY,s=this.INFINITY,n=-this.INFINITY;const i=Date.now();this.pvArray=Array(this.MAXPLY).fill(0).map((()=>Array(this.MAXPLY).fill(0))),this.pvLength=Array(this.MAXPLY).fill(0),this.nodesSearched=0,this.BoardState.Ply=0;for(let t=0;t<=1;t++)for(let a=e.a8;a<=e.h1;a++)for(let s=e.a8;s<=e.h1;s++)this.historyMoves[t][a][s]/=2;for(let e=1;e<=t;e++){let t=10;for(e>=5&&(a=Math.max(n-t,-this.INFINITY),s=Math.min(n+t,this.INFINITY));!this.Timer.stop;){if(n=this.NegaScout(a,s,e,0,!0),n<=a)a=Math.max(n-t,-this.INFINITY),s=(a+s)/2;else{if(!(n>=s))break;s=Math.min(n+t,this.INFINITY)}t+=t/2}if(this.Timer.stop)break;const o=Date.now();console.log(`info depth ${e} score ${this.FormatScore(n)} nodes ${this.nodesSearched} nps ${1e3*this.nodesSearched/(o-i)|0} hashfull ${1e3*this.TTUsed/Number(this.TTSize)|0} time ${o-i} pv ${this.GetPv()}`)}console.log(`bestmove ${this.StringifyMove(this.pvArray[0][0])}`)}NegaScout(e,t,a,s,n){if(this.nodesSearched%1e3==0&&(this.CheckTime(),this.Timer.stop))return this.ABORTEDSCORE;if(this.nodesSearched++,this.BoardState.Ply>=this.MAXPLY)return 0;if(this.pvLength[this.BoardState.Ply]=this.BoardState.Ply,this.BoardState.Ply>0&&(this.IsRepetition()||this.BoardState.HalfMoves>100))return 0;if(a<=0)return this.Quiescence(e,t,s);const i=t-e>1;let o=1,h=-this.INFINITY,r=0,c=t,d=0,f=0,b=[],x=-this.INFINITY;const B=this.GetEntry(this.BoardState.Hash);if(!i&&B&&B.Depth>=a&&(0===B.Flag||2===B.Flag&&B.Score>=t||1===B.Flag&&B.Score<=e))return B.Score;B&&(d=B.Move);let l=-this.INFINITY;const S=this.IsSquareAttacked(this.GetLS1B(this.BoardState.PiecesBB[5+6*this.BoardState.SideToMove]),1^this.BoardState.SideToMove);if(0===d&&a>=3&&(a-=1),!S&&!i){if(l=this.Evaluate(),a<=5&&l-60*a>=t&&Math.abs(l)<this.MATE-this.BoardState.Ply)return l;if(n&&l>=t&&0n!==(this.BoardState.OccupanciesBB[this.BoardState.SideToMove]^this.BoardState.PiecesBB[5+6*this.BoardState.SideToMove]^this.BoardState.PiecesBB[0+6*this.BoardState.SideToMove])){this.MakeNullMove();const e=3+Math.floor(a/5);let s=-this.NegaScout(-t,1-t,a-1-e,0,!1);if(this.UnmakeNullMove(),s>=t)return Math.abs(s)>this.MATE-this.BoardState.Ply?t:s}}if((e=Math.max(-this.MATE+this.BoardState.Ply,e))>=(t=Math.min(this.MATE-this.BoardState.Ply,t)))return e;const P=this.ScoreMoves(this.GenerateMoves(),d,s);for(let n=0;n<P.length;n++){const d=this.NextMove(P,n).move;if(!(i||S||this.IsCapture(d)||this.IsPromotion(d))){if(a<=10&&f>0&&l+110*a<e)continue;if(a<=4&&f>8*a)continue}if(!this.MakeMove(d)){this.UnmakeMove(d);continue}f++;let B=S?1:0;if(a>=3&&n>4){let t=1/(4/a)|0;if(this.IsCapture(d)||this.IsPromotion(d)||t++,t=Math.max(0,t),x=-this.NegaScout(-e-1,-e,a-1-t+B,d,!0),x<=e){this.UnmakeMove(d);continue}}if(x=-this.NegaScout(-c,-e,a-1+B,d,!0),x>e&&x<t&&n>1&&(x=-this.NegaScout(-t,-e,a-1+B,d,!0)),this.UnmakeMove(d),this.Timer.stop)return this.ABORTEDSCORE;if(x>h&&(h=x,r=d),x>e&&(e=x,o=0,this.UpdatePv(d),this.Timer.extended=a>1&&x+35<this.bestMoveScore.score,this.bestMoveScore={move:r,score:h}),e>=t){if(o=2,!this.IsCapture(d)){this.killerMoves[this.BoardState.Ply][1]=this.killerMoves[this.BoardState.Ply][0],this.killerMoves[this.BoardState.Ply][0]=d,this.counterMoves[this.MoveFrom(s)][this.MoveTo(s)]=d,this.historyMoves[this.BoardState.SideToMove][this.MoveFrom(d)][this.MoveTo(d)]+=a*a;for(let e=0;e<b.length;e++)this.historyMoves[this.BoardState.SideToMove][this.MoveFrom(b[e])][this.MoveTo(b[e])]+=-a*a}break}this.IsCapture(d)||b.push(d),c=e+1}return 0===f?S?-this.MATE+this.BoardState.Ply:0:(this.StoreEntry(this.BoardState.Hash,a,r,h,o),h)}Quiescence(e,t,a){if(this.nodesSearched%1e3==0&&(this.CheckTime(),this.Timer.stop))return this.ABORTEDSCORE;if(this.nodesSearched++,this.BoardState.Ply>=this.MAXPLY)return 0;const s=t-e>1;let n=1,i=0;const o=this.GetEntry(this.BoardState.Hash);if(!s&&o&&(0===o.Flag||2===o.Flag&&o.Score>=t||1===o.Flag&&o.Score<=e))return o.Score;o&&(i=o.Move);const h=this.Evaluate();if(h>=t)return h;h>e&&(e=h);let r=h,c=0;const d=this.ScoreMoves(this.GenerateMoves(!0),i,a);for(let a=0;a<d.length;a++){const s=this.NextMove(d,a).move;if(h+150+this.MGPieceValue[4]<e)continue;if(this.See(s)<0)continue;if(!this.MakeMove(s)){this.UnmakeMove(s);continue}let i=-this.Quiescence(-t,-e,s);if(this.UnmakeMove(s),i>r&&(r=i,c=s),i>=t){n=2;break}i>e&&(e=i,n=0)}return this.StoreEntry(this.BoardState.Hash,0,c,r,n),r}See(e){const t=this.MoveFrom(e),a=this.MoveTo(e),s=this.BoardState.Squares[t];let n=this.BoardState.Squares[a]?.Type,i=1^this.BoardState.SideToMove;const o=this.BoardState.OccupanciesBB[0]|this.BoardState.OccupanciesBB[1];if(void 0===s||void 0===n)return 0;const h=this.BoardState.PiecesBB[1]|this.BoardState.PiecesBB[7],r=this.BoardState.PiecesBB[2]|this.BoardState.PiecesBB[8],c=this.BoardState.PiecesBB[3]|this.BoardState.PiecesBB[9],d=this.BoardState.PiecesBB[4]|this.BoardState.PiecesBB[10],f=r|d,b=c|d,x=this.BoardState.PiecesBB[0]|this.BoardState.PiecesBB[6]|r|c|d,B=[];let l=0,S=this.squareBB[t],P=this.AttacksTo(a,o,h,f,b),p=0n;for(B[l]=this.MGPieceValue[n];S&&(l++,B[l]=this.MGPieceValue[s.Type]-B[l-1],!(Math.max(-B[l-1],B[l])<0));){P^=S,p|=S,S&x&&(P|=(f&this.GenerateBishopAttacks(o,a)|b&this.GenerateRookAttacks(o,a))&~p);const{bitboard:e,piece:t}=this.GetLeastValuablePiece(P,i,n);S=e,n=t,i^=1}for(;--l;)B[l-1]=-Math.max(-B[l-1],B[l]);return B[0]}AttacksTo(e,t,a,s,n){const i=this.BoardState.PiecesBB[0]&this.PawnAttacks[e+64]|this.BoardState.PiecesBB[6]&this.PawnAttacks[e],o=(this.BoardState.PiecesBB[5]|this.BoardState.PiecesBB[11])&this.KingAttacks[e];return s&=this.GenerateBishopAttacks(t,e),n&=this.GenerateRookAttacks(t,e),i|a&this.KnightAttacks[e]|o|s|n}GetLeastValuablePiece(e,t,a){for(a=0;a<=5;a++){let s=e&this.BoardState.PiecesBB[a+6*t];if(s)return{bitboard:s&-s,piece:a}}return{bitboard:0n,piece:0}}IsRepetition(){for(let e=this.boardStates.length-this.BoardState.HalfMoves;e<this.boardStates.length-1;e++)if(this.boardStates[e]?.Hash===this.BoardState.Hash)return!0;return!1}LoadFEN(t){this.BoardState.PiecesBB=new BigUint64Array(12),this.BoardState.OccupanciesBB=new BigUint64Array(2),this.BoardState.CastlingRights=0,this.BoardState.Squares=new Array(64).fill(void 0),this.BoardState.EnPassSq=e.no_sq,this.BoardState.Phase=this.PhaseTotal,this.BoardState.CastlingSquaresMask=new Array(64).fill(15);const a=t.split(" ")[0].split("");let s=0;for(let e=0;e<a.length;e++){const t=a[e];switch(t.toLowerCase()){case"p":case"n":case"b":case"r":case"q":case"k":{const e=this.CharToPiece.get(t);this.PlacePiece(e.Type,e.Color,s),this.BoardState.Phase-=this.PhaseValues[e.Type],s++;break}case"1":case"2":case"3":case"4":case"4":case"5":case"6":case"7":case"8":s+=parseInt(t);break;case"/":break;default:throw new Error(`Unable to parse FEN character: ${t}`)}}this.BoardState.SideToMove="w"===t.split(" ")[1]?0:1;const n=t.split(" ")[2].split("");for(const t of n){const a=t.toUpperCase()===t?0:1,s=this.GetLS1B(this.BoardState.PiecesBB[5+6*a]);if(this.BoardState.CastlingSquaresMask[s]=0===a?12:3,"K"===t.toUpperCase()){const t=this.BoardState.Squares.findIndex(((e,t)=>e&&3===e.Type&&e.Color===a&&t>s&&t>>3==s>>3));0===a?(this.BoardState.CastlingRights|=1,this.BoardState.CastlingPaths[1]=(this.betweenMasks[s][e.g1]|this.betweenMasks[t][e.f1])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[1]=t,this.BoardState.CastlingSquaresMask[t]=14):(this.BoardState.CastlingRights|=4,this.BoardState.CastlingPaths[4]=(this.betweenMasks[s][e.g8]|this.betweenMasks[t][e.f8])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[4]=t,this.BoardState.CastlingSquaresMask[t]=11)}else if("Q"===t.toUpperCase()){const t=this.BoardState.Squares.findIndex(((e,t)=>e&&3===e.Type&&e.Color===a&&t<s&&t>>3==s>>3));0===a?(this.BoardState.CastlingRights|=2,this.BoardState.CastlingPaths[2]=(this.betweenMasks[s][e.c1]|this.betweenMasks[t][e.d1])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[2]=t,this.BoardState.CastlingSquaresMask[t]=13):(this.BoardState.CastlingRights|=8,this.BoardState.CastlingPaths[8]=(this.betweenMasks[s][e.c8]|this.betweenMasks[t][e.d8])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[8]=t,this.BoardState.CastlingSquaresMask[t]=7)}else if(t.toUpperCase()>="A"&&t.toUpperCase()<="H")if(t.toUpperCase().charCodeAt(0)-65>(7&s)){const t=this.BoardState.Squares.findIndex(((e,t)=>e&&3===e.Type&&e.Color===a&&t>s&&t>>3==s>>3));0===a?(this.BoardState.CastlingRights|=1,this.BoardState.CastlingPaths[1]=(this.betweenMasks[s][e.g1]|this.betweenMasks[t][e.f1]|this.squareBB[e.g1]|this.squareBB[e.f1])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[1]=t,this.BoardState.CastlingSquaresMask[t]=14):(this.BoardState.CastlingRights|=4,this.BoardState.CastlingPaths[4]=(this.betweenMasks[s][e.g8]|this.betweenMasks[t][e.f8]|this.squareBB[e.g8]|this.squareBB[e.f8])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[4]=t,this.BoardState.CastlingSquaresMask[t]=11)}else if(0===a){const t=this.BoardState.Squares.findIndex(((e,t)=>e&&3===e.Type&&e.Color===a&&t>=56&&t<s&&t>>3==s>>3));this.BoardState.CastlingRights|=2,this.BoardState.CastlingPaths[2]=(this.betweenMasks[s][e.c1]|this.betweenMasks[t][e.d1]|this.squareBB[e.c1]|this.squareBB[e.d1])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[2]=t,this.BoardState.CastlingSquaresMask[t]=13}else{const t=this.BoardState.Squares.findIndex(((e,t)=>e&&3===e.Type&&e.Color===a&&t<s));this.BoardState.CastlingRights|=8,this.BoardState.CastlingPaths[8]=(this.betweenMasks[s][e.c8]|this.betweenMasks[t][e.d8]|this.squareBB[e.c8]|this.squareBB[e.d8])&~(this.BoardState.PiecesBB[5+6*a]|this.SetBit(0n,t)),this.BoardState.CastlingRookSquares[8]=t,this.BoardState.CastlingSquaresMask[t]=7}}const i=t.split(" ")[3];if("-"!==i){const e="abcdefgh".indexOf(i.split("")[0]),t=8*(8-parseInt(i[1],10))+e;this.BoardState.EnPassSq=t}this.BoardState.Ply=2*parseInt(t.split(" ")[5])||0,1===this.BoardState.SideToMove&&(this.BoardState.Ply--,this.BoardState.Ply<0&&(this.BoardState.Ply=1)),this.BoardState.HalfMoves=parseInt(t.split(" ")[4])||0;const{hash:o,pawnHash:h}=this.GenerateHashes();this.BoardState.Hash=o,this.BoardState.PawnHash=h}GenerateFEN(){let t="";for(let e=0;e<=7;e++){let a=0;for(let s=0;s<=7;s++){const n=8*e+s,i=this.BoardState.Squares[n];if(void 0===i){a++;continue}a>0&&(t+=a.toString(),a=0);let o=this.PieceToChar.get(i.Type);1===i.Color&&(o=o.toLowerCase()),t+=o}a>0&&(t+=a.toString()),e>=0&&7!==e&&(t+="/")}if(0===this.BoardState.SideToMove?t+=" w ":t+=" b ",0===this.BoardState.CastlingRights&&(t+="-"),0!=(1&this.BoardState.CastlingRights)&&(t+="K"),0!=(2&this.BoardState.CastlingRights)&&(t+="Q"),0!=(4&this.BoardState.CastlingRights)&&(t+="k"),0!=(8&this.BoardState.CastlingRights)&&(t+="q"),t+=" ",this.BoardState.EnPassSq===e.no_sq)t+="-";else{const e=(56^this.BoardState.EnPassSq)/8|0,a=(56^this.BoardState.EnPassSq)%8;t+=`${String.fromCharCode(a+"a".charCodeAt(0))}${e+1}`}return t+=" "+this.BoardState.HalfMoves.toString(),t}PrintBitboard(e){for(let t=0;t<8;t++){let a="";for(let s=0;s<8;s++){const n=8*t+s;s||(a+=8-t+"  "),a+=" "+(this.GetBit(e,n)?"1":"0")}console.log(`${a} \r\n`)}console.log("\r\n    a b c d e f g h"),console.log(`    Bitboard: ${e}`)}PrintBoard(){const t=[["♙","♘","♗","♖","♕","♔"],["♟︎","♞","♝","♜","♛","♚"]];for(let e=0;e<8;e++){let a="";for(let s=0;s<8;s++){let n=8*e+s,i=this.BoardState.Squares[n]??null;s||(a+=8-e+" "),a+=i?` ${t[i.Color][i.Type]}`:" . "}console.log(`${a} \r\n`)}console.log("\r\n   a  b  c  d  e  f  g  h"),console.log("Side to move: "+(0===this.BoardState.SideToMove?"white":"black")),console.log(`En passant: ${this.BoardState.EnPassSq!==e.no_sq?e[this.BoardState.EnPassSq]:"no"}`),console.log(`Castling rights: ${1&this.BoardState.CastlingRights?"K":"-"}${2&this.BoardState.CastlingRights?"Q":"-"}${4&this.BoardState.CastlingRights?"k":"-"}${8&this.BoardState.CastlingRights?"q":"-"}`),console.log(`Plies: ${this.BoardState.Ply}`)}StartTimer(){let e=0;if(this.Timer.stop=!1,this.Timer.extended=!1,-1!==this.Timer.timeleft||-1!==this.Timer.movetime){if(0!==this.Timer.movestogo){const t=Math.min(Math.max(this.Timer.movestogo,2),30);e=this.Timer.timeleft/t}else if(-1!==this.Timer.movetime)e=this.Timer.movetime;else{let t=25;this.BoardState.Ply<=20&&(t=45-this.BoardState.Ply),e=this.Timer.timeleft/t+this.Timer.increment/2}e>=this.Timer.timeleft&&(e-=this.Timer.increment),e<=0&&(e=this.Timer.increment-1),this.Timer.startTime=Date.now(),this.Timer.stopTime=this.Timer.startTime+e}}CheckTime(){if(this.Timer.stop||-1!==this.Timer.timeleft||-1!==this.Timer.movetime)return Date.now()>this.Timer.stopTime?-1!==this.Timer.movetime?void(this.Timer.stop=!0):this.Timer.extended?Date.now()-this.Timer.startTime>=.6*this.Timer.timeleft?void(this.Timer.stop=!0):void 0:void(this.Timer.stop=!0):void(Date.now()>this.Timer.stopTime&&(!this.Timer.extended||Date.now()-this.Timer.startTime>=.75*this.Timer.timeleft)&&(this.Timer.stop=!0))}ParseUCIPosition(e){const a=e.split(" ").slice(1).join(" ");a.startsWith("fen")?this.LoadFEN(a.split(" ").slice(1).join(" ")):this.LoadFEN(t.positions.start);const s=a.split("moves ").slice(1).join(" ").split(" ").filter((e=>""!=e));for(let t=0;t<s.length;t++){const a=this.ParseUCIMove(s[t]);if(!a){console.error("Unable to parse UCI command"),console.log(`Command: ${e}`),console.log(`Invalid move: ${s[t]}`);break}this.MakeMove(a)}}ParseUCIMove(t){const a=parseInt(t.charAt(0),36)-10,s=8*(7-(parseInt(t.charAt(1))-1))+a,n=parseInt(t.charAt(2),36)-10;let i=8*(7-(parseInt(t.charAt(3))-1))+n;const o=this.BoardState.Squares[s];let h=0;if(5===t.length){const e=t.charAt(4);"n"===e?h=8:"b"===e?h=9:"r"===e?h=10:"q"===e&&(h=11)}if(5===o.Type){const a=i>s;this.isChess960||"e1g1"!==t&&"e1c1"!==t&&"e8g8"!==t&&"e8c8"!==t?(i===this.BoardState.CastlingRookSquares[1]&&1&this.BoardState.CastlingRights||i===this.BoardState.CastlingRookSquares[4]&&4&this.BoardState.CastlingRights||i===this.BoardState.CastlingRookSquares[2]&&2&this.BoardState.CastlingRights||i===this.BoardState.CastlingRookSquares[8]&&8&this.BoardState.CastlingRights)&&(h=a?2:3):(i=(a?e.h1:e.a1)^56*o.Color,h=a?2:3)}else i===this.BoardState.EnPassSq&&0===o.Type&&(h=5);return this.EncodeMove(s,i,h)}ParseUCIGo(e){const t=e.split(" "),a=0===this.BoardState.SideToMove?"w":"b";let s=-1,n=0,i=0,o=-1,h=this.MAXPLY;for(let e=0;e<t.length;e++){const r=t[e];r===a+"time"?s=parseInt(t[e+1]):r===a+"inc"?n=parseInt(t[e+1]):"movestogo"===r?i=parseInt(t[e+1]):"depth"===r?h=Math.min(parseInt(t[e+1]),this.MAXPLY):"movetime"===r&&(o=parseInt(t[e+1]))}return this.Timer.timeleft=s,this.Timer.increment=n,this.Timer.depth=h,this.Timer.movestogo=i,this.Timer.movetime=o,this.Search(h)}Perft(e,t=!1){this.totalNodes=0;const a=performance.now(),s=this.GenerateMoves();for(let a=0;a<s.length;a++){const n=s[a];if(this.MakeMove(n)){let a=this.PerftDriver(e-1);t&&console.log(`${this.StringifyMove(n)}: ${a}`)}this.UnmakeMove(n)}const n=performance.now();return t&&console.log(`Nodes: ${this.totalNodes.toLocaleString()}. nps: ${Math.round(1e3*this.totalNodes/(n-a)).toLocaleString()}. Total time taken: ${n-a} ms`),this.totalNodes}PerftDriver(e){let t=0;if(0===e)return this.totalNodes++,1;const a=this.GenerateMoves();for(let s=0;s<a.length;s++){const n=a[s];this.MakeMove(n)&&(t+=this.PerftDriver(e-1)),this.UnmakeMove(n)}return t}}t.positions={empty:"8/8/8/8/8/8/8/8 b - - ",start:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",kiwipete:"r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq -",pos3:"8/2p5/3p4/KP5r/1R3p1k/8/4P1P1/8 w - -",pos4w:"r3k2r/Pppp1ppp/1b3nbN/nP6/BBP1P3/q4N2/Pp1P2PP/R2Q1RK1 w kq - 0 1",pos4b:"r2q1rk1/pP1p2pp/Q4n2/bbp1p3/Np6/1B3NBn/pPPP1PPP/R3K2R b KQ - 0 1",pos5:"rnbq1k1r/pp1Pbppp/2p5/8/2B5/8/PPP1NnPP/RNBQK2R w KQ - 1 8",pos6:"r4rk1/1pp1qppp/p1np1n2/2b1p1B1/2B1P1b1/P1NP1N2/1PP1QPPP/R4RK1 w - - 0 10"};const s=t,n=require("fs");var i=a.n(n);const o=require("path");var h=a.n(o);class r{constructor(){this._entries=null,this._filePath=h().join(__dirname,"khepri_polyglot.bin")}TryLoad(){if(i().existsSync(this._filePath)){const t=i().readFileSync(this._filePath),a=Buffer.from(t);this._entries=new Map;let s=0;for(;s<a.length;){const t=a.readUInt16BE(s+8),n=`${e[(4032&t)>>6^56]}${e[63&t^56]}`,i=t>>12;let o="";switch(i>0&&console.log(i),i){case 8:case 12:o="n";break;case 9:case 13:o="b";break;case 10:case 14:o="r";break;case 11:case 15:o="q"}const h=a.readBigUInt64BE(s);if(this._entries.has(h)){const e=this._entries.get(h);e.weight<a.readUInt16BE(s+10)&&(e.move=`${n}${o}`,e.weight=a.readUInt16BE(s+10),this._entries.set(h,e))}else this._entries.set(h,{move:`${n}${o}`,weight:a.readUInt16BE(s+10)});s+=16}}return this._entries}static PolyglotHash(t){let a=0n;for(let[e,s]of t.Squares.entries()){if(void 0===s)continue;let t=2*s.Type;0===s.Color&&(t+=1),a^=c[64*t+(56^e)]}return t.EnPassSq!==e.no_sq&&(a^=c[772+t.EnPassSq%8]),1&t.CastlingRights&&(a^=c[768]),2&t.CastlingRights&&(a^=c[769]),4&t.CastlingRights&&(a^=c[770]),8&t.CastlingRights&&(a^=c[771]),0===t.SideToMove&&(a^=c[780]),a}TestHashing(){const e=[{fen:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",hash:0x463b96181691fc9cn},{fen:"rnbqkbnr/pppppppp/8/8/4P3/8/PPPP1PPP/RNBQKBNR b KQkq e3 0 1",hash:0x823c9b50fd114196n},{fen:"rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq d6 0 2",hash:0x0756b94461c50fb0n},{fen:"rnbqkbnr/ppp1pppp/8/3pP3/8/8/PPPP1PPP/RNBQKBNR b KQkq - 0 2",hash:0x662fafb965db29d4n},{fen:"rnbqkbnr/ppp1p1pp/8/3pPp2/8/8/PPPP1PPP/RNBQKBNR w KQkq f6 0 3",hash:0x22a48b5a8e47ff78n},{fen:"rnbqkbnr/ppp1p1pp/8/3pPp2/8/8/PPPPKPPP/RNBQ1BNR b kq - 0 3",hash:0x652a607ca3f242c1n},{fen:"rnbq1bnr/ppp1pkpp/8/3pPp2/8/8/PPPPKPPP/RNBQ1BNR w - - 0 4",hash:0x00fdd303c946bdd9n},{fen:"rnbqkbnr/p1pppppp/8/8/PpP4P/8/1P1PPPP1/RNBQKBNR b KQkq c3 0 3",hash:0x3c8123ea7b067637n},{fen:"rnbqkbnr/p1pppppp/8/8/P6P/R1p5/1P1PPPP1/1NBQKBNR b Kkq - 0 4",hash:0x5c3f9b829b279560n}],t=new s;for(let a of e){t.LoadFEN(a.fen);const e=r.PolyglotHash(t.BoardState);console.assert(e===a.hash,`Polyglot hash for position ${a.fen} is incorrect! Generated ${e} instead of ${a.hash}`)}console.log("Testing completed")}}const c=[0x9d39247e33776d41n,0x2af7398005aaa5c7n,0x44db015024623547n,0x9c15f73e62a76ae2n,0x75834465489c0c89n,0x3290ac3a203001bfn,0x0fbbad1f61042279n,0xe83a908ff2fb60can,0x0d7e765d58755c10n,0x1a083822ceafe02dn,0x9605d5f0e25ec3b0n,0xd021ff5cd13a2ed5n,0x40bdf15d4a672e32n,0x011355146fd56395n,0x5db4832046f3d9e5n,0x239f8b2d7ff719ccn,0x05d1a1ae85b49aa1n,0x679f848f6e8fc971n,0x7449bbff801fed0bn,0x7d11cdb1c3b7adf0n,0x82c7709e781eb7ccn,0xf3218f1c9510786cn,0x331478f3af51bbe6n,0x4bb38de5e7219443n,0xaa649c6ebcfd50fcn,0x8dbd98a352afd40bn,0x87d2074b81d79217n,0x19f3c751d3e92ae1n,0xb4ab30f062b19abfn,0x7b0500ac42047ac4n,0xc9452ca81a09d85dn,0x24aa6c514da27500n,0x4c9f34427501b447n,0x14a68fd73c910841n,0xa71b9b83461cbd93n,0x03488b95b0f1850fn,0x637b2b34ff93c040n,0x09d1bc9a3dd90a94n,0x3575668334a1dd3bn,0x735e2b97a4c45a23n,0x18727070f1bd400bn,0x1fcbacd259bf02e7n,0xd310a7c2ce9b6555n,0xbf983fe0fe5d8244n,0x9f74d14f7454a824n,0x51ebdc4ab9ba3035n,0x5c82c505db9ab0fan,0xfcf7fe8a3430b241n,0x3253a729b9ba3dden,0x8c74c368081b3075n,0xb9bc6c87167c33e7n,0x7ef48f2b83024e20n,0x11d505d4c351bd7fn,0x6568fca92c76a243n,0x4de0b0f40f32a7b8n,0x96d693460cc37e5dn,0x42e240cb63689f2fn,0x6d2bdcdae2919661n,0x42880b0236e4d951n,0x5f0f4a5898171bb6n,0x39f890f579f92f88n,0x93c5b5f47356388bn,0x63dc359d8d231b78n,0xec16ca8aea98ad76n,0x5355f900c2a82dc7n,0x07fb9f855a997142n,0x5093417aa8a7ed5en,0x7bcbc38da25a7f3cn,0x19fc8a768cf4b6d4n,0x637a7780decfc0d9n,0x8249a47aee0e41f7n,0x79ad695501e7d1e8n,0x14acbaf4777d5776n,0xf145b6beccdea195n,0xdabf2ac8201752fcn,0x24c3c94df9c8d3f6n,0xbb6e2924f03912ean,0x0ce26c0b95c980d9n,0xa49cd132bfbf7cc4n,0xe99d662af4243939n,0x27e6ad7891165c3fn,0x8535f040b9744ff1n,0x54b3f4fa5f40d873n,0x72b12c32127fed2bn,0xee954d3c7b411f47n,0x9a85ac909a24eaa1n,0x70ac4cd9f04f21f5n,0xf9b89d3e99a075c2n,0x87b3e2b2b5c907b1n,0xa366e5b8c54f48b8n,0xae4a9346cc3f7cf2n,0x1920c04d47267bbdn,0x87bf02c6b49e2ae9n,0x092237ac237f3859n,0xff07f64ef8ed14d0n,0x8de8dca9f03cc54en,0x9c1633264db49c89n,0xb3f22c3d0b0b38edn,0x390e5fb44d01144bn,0x5bfea5b4712768e9n,0x1e1032911fa78984n,0x9a74acb964e78cb3n,0x4f80f7a035dafb04n,0x6304d09a0b3738c4n,0x2171e64683023a08n,0x5b9b63eb9ceff80cn,0x506aacf489889342n,0x1881afc9a3a701d6n,0x6503080440750644n,0xdfd395339cdbf4a7n,0xef927dbcf00c20f2n,0x7b32f7d1e03680ecn,0xb9fd7620e7316243n,0x05a7e8a57db91b77n,0xb5889c6e15630a75n,0x4a750a09ce9573f7n,0xcf464cec899a2f8an,0xf538639ce705b824n,0x3c79a0ff5580ef7fn,0xede6c87f8477609dn,0x799e81f05bc93f31n,0x86536b8cf3428a8cn,0x97d7374c60087b73n,0xa246637cff328532n,0x043fcae60cc0eba0n,0x920e449535dd359en,0x70eb093b15b290ccn,0x73a1921916591cbdn,0x56436c9fe1a1aa8dn,0xefac4b70633b8f81n,0xbb215798d45df7afn,0x45f20042f24f1768n,0x930f80f4e8eb7462n,0xff6712ffcfd75ea1n,0xae623fd67468aa70n,0xdd2c5bc84bc8d8fcn,0x7eed120d54cf2dd9n,0x22fe545401165f1cn,0xc91800e98fb99929n,0x808bd68e6ac10365n,0xdec468145b7605f6n,0x1bede3a3aef53302n,0x43539603d6c55602n,0xaa969b5c691ccb7an,0xa87832d392efee56n,0x65942c7b3c7e11aen,0xded2d633cad004f6n,0x21f08570f420e565n,0xb415938d7da94e3cn,0x91b859e59ecb6350n,0x10cff333e0ed804an,0x28aed140be0bb7ddn,0xc5cc1d89724fa456n,0x5648f680f11a2741n,0x2d255069f0b7dab3n,0x9bc5a38ef729abd4n,0xef2f054308f6a2bcn,0xaf2042f5cc5c2858n,0x480412bab7f5be2an,0xaef3af4a563dfe43n,0x19afe59ae451497fn,0x52593803dff1e840n,0xf4f076e65f2ce6f0n,0x11379625747d5af3n,0xbce5d2248682c115n,0x9da4243de836994fn,0x066f70b33fe09017n,0x4dc4de189b671a1cn,0x51039ab7712457c3n,0xc07a3f80c31fb4b4n,0xb46ee9c5e64a6e7cn,0xb3819a42abe61c87n,0x21a007933a522a20n,0x2df16f761598aa4fn,0x763c4a1371b368fdn,0xf793c46702e086a0n,0xd7288e012aeb8d31n,0xde336a2a4bc1c44bn,0x0bf692b38d079f23n,0x2c604a7a177326b3n,0x4850e73e03eb6064n,0xcfc447f1e53c8e1bn,0xb05ca3f564268d99n,0x9ae182c8bc9474e8n,0xa4fc4bd4fc5558can,0xe755178d58fc4e76n,0x69b97db1a4c03dfen,0xf9b5b7c4acc67c96n,0xfc6a82d64b8655fbn,0x9c684cb6c4d24417n,0x8ec97d2917456ed0n,0x6703df9d2924e97en,0xc547f57e42a7444en,0x78e37644e7cad29en,0xfe9a44e9362f05fan,0x08bd35cc38336615n,0x9315e5eb3a129acen,0x94061b871e04df75n,0xdf1d9f9d784ba010n,0x3bba57b68871b59dn,0xd2b7adeeded1f73fn,0xf7a255d83bc373f8n,0xd7f4f2448c0ceb81n,0xd95be88cd210ffa7n,0x336f52f8ff4728e7n,0xa74049dac312ac71n,0xa2f61bb6e437fdb5n,0x4f2a5cb07f6a35b3n,0x87d380bda5bf7859n,0x16b9f7e06c453a21n,0x7ba2484c8a0fd54en,0xf3a678cad9a2e38cn,0x39b0bf7dde437ba2n,0xfcaf55c1bf8a4424n,0x18fcf680573fa594n,0x4c0563b89f495ac3n,0x40e087931a00930dn,0x8cffa9412eb642c1n,0x68ca39053261169fn,0x7a1ee967d27579e2n,0x9d1d60e5076f5b6fn,0x3810e399b6f65ba2n,0x32095b6d4ab5f9b1n,0x35cab62109dd038an,0xa90b24499fcfafb1n,0x77a225a07cc2c6bdn,0x513e5e634c70e331n,0x4361c0ca3f692f12n,0xd941aca44b20a45bn,0x528f7c8602c5807bn,0x52ab92beb9613989n,0x9d1dfa2efc557f73n,0x722ff175f572c348n,0x1d1260a51107fe97n,0x7a249a57ec0c9ba2n,0x04208fe9e8f7f2d6n,0x5a110c6058b920a0n,0x0cd9a497658a5698n,0x56fd23c8f9715a4cn,0x284c847b9d887aaen,0x04feabfbbdb619cbn,0x742e1e651c60ba83n,0x9a9632e65904ad3cn,0x881b82a13b51b9e2n,0x506e6744cd974924n,0xb0183db56ffc6a79n,0x0ed9b915c66ed37en,0x5e11e86d5873d484n,0xf678647e3519ac6en,0x1b85d488d0f20cc5n,0xdab9fe6525d89021n,0x0d151d86adb73615n,0xa865a54edcc0f019n,0x93c42566aef98ffbn,0x99e7afeabe000731n,0x48cbff086ddf285an,0x7f9b6af1ebf78bafn,0x58627e1a149bba21n,0x2cd16e2abd791e33n,0xd363eff5f0977996n,0x0ce2a38c344a6eedn,0x1a804aadb9cfa741n,0x907f30421d78c5den,0x501f65edb3034d07n,0x37624ae5a48fa6e9n,0x957baf61700cff4en,0x3a6c27934e31188an,0xd49503536abca345n,0x088e049589c432e0n,0xf943aee7febf21b8n,0x6c3b8e3e336139d3n,0x364f6ffa464ee52en,0xd60f6dcedc314222n,0x56963b0dca418fc0n,0x16f50edf91e513afn,0xef1955914b609f93n,0x565601c0364e3228n,0xecb53939887e8175n,0xbac7a9a18531294bn,0xb344c470397bba52n,0x65d34954daf3cebdn,0xb4b81b3fa97511e2n,0xb422061193d6f6a7n,0x071582401c38434dn,0x7a13f18bbedc4ff5n,0xbc4097b116c524d2n,0x59b97885e2f2ea28n,0x99170a5dc3115544n,0x6f423357e7c6a9f9n,0x325928ee6e6f8794n,0xd0e4366228b03343n,0x565c31f7de89ea27n,0x30f5611484119414n,0xd873db391292ed4fn,0x7bd94e1d8e17debcn,0xc7d9f16864a76e94n,0x947ae053ee56e63cn,0xc8c93882f9475f5fn,0x3a9bf55ba91f81can,0xd9a11fbb3d9808e4n,0x0fd22063edc29fcan,0xb3f256d8aca0b0b9n,0xb03031a8b4516e84n,0x35dd37d5871448afn,0xe9f6082b05542e4en,0xebfafa33d7254b59n,0x9255abb50d532280n,0xb9ab4ce57f2d34f3n,0x693501d628297551n,0xc62c58f97dd949bfn,0xcd454f8f19c5126an,0xbbe83f4ecc2bdecbn,0xdc842b7e2819e230n,0xba89142e007503b8n,0xa3bc941d0a5061cbn,0xe9f6760e32cd8021n,0x09c7e552bc76492fn,0x852f54934da55cc9n,0x8107fccf064fcf56n,0x098954d51fff6580n,0x23b70edb1955c4bfn,0xc330de426430f69dn,0x4715ed43e8a45c0an,0xa8d7e4dab780a08dn,0x0572b974f03ce0bbn,0xb57d2e985e1419c7n,0xe8d9ecbe2cf3d73fn,0x2fe4b17170e59750n,0x11317ba87905e790n,0x7fbf21ec8a1f45ecn,0x1725cabfcb045b00n,0x964e915cd5e2b207n,0x3e2b8bcbf016d66dn,0xbe7444e39328a0acn,0xf85b2b4fbcde44b7n,0x49353fea39ba63b1n,0x1dd01aafcd53486an,0x1fca8a92fd719f85n,0xfc7c95d827357afan,0x18a6a990c8b35ebdn,0xcccb7005c6b9c28dn,0x3bdbb92c43b17f26n,0xaa70b5b4f89695a2n,0xe94c39a54a98307fn,0xb7a0b174cff6f36en,0xd4dba84729af48adn,0x2e18bc1ad9704a68n,0x2de0966daf2f8b1cn,0xb9c11d5b1e43a07en,0x64972d68dee33360n,0x94628d38d0c20584n,0xdbc0d2b6ab90a559n,0xd2733c4335c6a72fn,0x7e75d99d94a70f4dn,0x6ced1983376fa72bn,0x97fcaacbf030bc24n,0x7b77497b32503b12n,0x8547eddfb81ccb94n,0x79999cdff70902cbn,0xcffe1939438e9b24n,0x829626e3892d95d7n,0x92fae24291f2b3f1n,0x63e22c147b9c3403n,0xc678b6d860284a1cn,0x5873888850659ae7n,0x0981dcd296a8736dn,0x9f65789a6509a440n,0x9ff38fed72e9052fn,0xe479ee5b9930578cn,0xe7f28ecd2d49eecdn,0x56c074a581ea17fen,0x5544f7d774b14aefn,0x7b3f0195fc6f290fn,0x12153635b2c0cf57n,0x7f5126dbba5e0ca7n,0x7a76956c3eafb413n,0x3d5774a11d31ab39n,0x8a1b083821f40cb4n,0x7b4a38e32537df62n,0x950113646d1d6e03n,0x4da8979a0041e8a9n,0x3bc36e078f7515d7n,0x5d0a12f27ad310d1n,0x7f9d1a2e1ebe1327n,0xda3a361b1c5157b1n,0xdcdd7d20903d0c25n,0x36833336d068f707n,0xce68341f79893389n,0xab9090168dd05f34n,0x43954b3252dc25e5n,0xb438c2b67f98e5e9n,0x10dcd78e3851a492n,0xdbc27ab5447822bfn,0x9b3cdb65f82ca382n,0xb67b7896167b4c84n,0xbfced1b0048eac50n,0xa9119b60369ffebdn,0x1fff7ac80904bf45n,0xac12fb171817eee7n,0xaf08da9177dda93dn,0x1b0cab936e65c744n,0xb559eb1d04e5e932n,0xc37b45b3f8d6f2ban,0xc3a9dc228caac9e9n,0xf3b8b6675a6507ffn,0x9fc477de4ed681dan,0x67378d8eccef96cbn,0x6dd856d94d259236n,0xa319ce15b0b4db31n,0x073973751f12dd5en,0x8a8e849eb32781a5n,0xe1925c71285279f5n,0x74c04bf1790c0efen,0x4dda48153c94938an,0x9d266d6a1cc0542cn,0x7440fb816508c4fen,0x13328503df48229fn,0xd6bf7baee43cac40n,0x4838d65f6ef6748fn,0x1e152328f3318dean,0x8f8419a348f296bfn,0x72c8834a5957b511n,0xd7a023a73260b45cn,0x94ebc8abcfb56daen,0x9fc10d0f989993e0n,0xde68a2355b93cae6n,0xa44cfe79ae538bben,0x9d1d84fcce371425n,0x51d2b1ab2ddfb636n,0x2fd7e4b9e72cd38cn,0x65ca5b96b7552210n,0xdd69a0d8ab3b546dn,0x604d51b25fbf70e2n,0x73aa8a564fb7ac9en,0x1a8c1e992b941148n,0xaac40a2703d9bea0n,0x764dbeae7fa4f3a6n,0x1e99b96e70a9be8bn,0x2c5e9deb57ef4743n,0x3a938fee32d29981n,0x26e6db8ffdf5adfen,0x469356c504ec9f9dn,0xc8763c5b08d1908cn,0x3f6c6af859d80055n,0x7f7cc39420a3a545n,0x9bfb227ebdf4c5cen,0x89039d79d6fc5c5cn,0x8fe88b57305e2ab6n,0xa09e8c8c35ab96den,0xfa7e393983325753n,0xd6b6d0ecc617c699n,0xdfea21ea9e7557e3n,0xb67c1fa481680af8n,0xca1e3785a9e724e5n,0x1cfc8bed0d681639n,0xd18d8549d140caean,0x4ed0fe7e9dc91335n,0xe4dbf0634473f5d2n,0x1761f93a44d5aefen,0x53898e4c3910da55n,0x734de8181f6ec39an,0x2680b122baa28d97n,0x298af231c85bafabn,0x7983eed3740847d5n,0x66c1a2a1a60cd889n,0x9e17e49642a3e4c1n,0xedb454e7badc0805n,0x50b704cab602c329n,0x4cc317fb9cddd023n,0x66b4835d9eafea22n,0x219b97e26ffc81bdn,0x261e4e4c0a333a9dn,0x1fe2cca76517db90n,0xd7504dfa8816edbbn,0xb9571fa04dc089c8n,0x1ddc0325259b27den,0xcf3f4688801eb9aan,0xf4f5d05c10cab243n,0x38b6525c21a42b0en,0x36f60e2ba4fa6800n,0xeb3593803173e0cen,0x9c4cd6257c5a3603n,0xaf0c317d32adaa8an,0x258e5a80c7204c4bn,0x8b889d624d44885dn,0xf4d14597e660f855n,0xd4347f66ec8941c3n,0xe699ed85b0dfb40dn,0x2472f6207c2d0484n,0xc2a1e7b5b459aeb5n,0xab4f6451cc1d45ecn,0x63767572ae3d6174n,0xa59e0bd101731a28n,0x116d0016cb948f09n,0x2cf9c8ca052f6e9fn,0x0b090a7560a968e3n,0xabeeddb2dde06ff1n,0x58efc10b06a2068dn,0xc6e57a78fbd986e0n,0x2eab8ca63ce802d7n,0x14a195640116f336n,0x7c0828dd624ec390n,0xd74bbe77e6116ac7n,0x804456af10f5fb53n,0xebe9ea2adf4321c7n,0x03219a39ee587a30n,0x49787fef17af9924n,0xa1e9300cd8520548n,0x5b45e522e4b1b4efn,0xb49c3b3995091a36n,0xd4490ad526f14431n,0x12a8f216af9418c2n,0x001f837cc7350524n,0x1877b51e57a764d5n,0xa2853b80f17f58een,0x993e1de72d36d310n,0xb3598080ce64a656n,0x252f59cf0d9f04bbn,0xd23c8e176d113600n,0x1bda0492e7e4586en,0x21e0bd5026c619bfn,0x3b097adaf088f94en,0x8d14dedb30be846en,0xf95cffa23af5f6f4n,0x3871700761b3f743n,0xca672b91e9e4fa16n,0x64c8e531bff53b55n,0x241260ed4ad1e87dn,0x106c09b972d2e822n,0x7fba195410e5ca30n,0x7884d9bc6cb569d8n,0x0647dfedcd894a29n,0x63573ff03e224774n,0x4fc8e9560f91b123n,0x1db956e450275779n,0xb8d91274b9e9d4fbn,0xa2ebee47e2fbfce1n,0xd9f1f30ccd97fb09n,0xefed53d75fd64e6bn,0x2e6d02c36017f67fn,0xa9aa4d20db084e9bn,0xb64be8d8b25396c1n,0x70cb6af7c2d5bcf0n,0x98f076a4f7a2322en,0xbf84470805e69b5fn,0x94c3251f06f90cf3n,0x3e003e616a6591e9n,0xb925a6cd0421aff3n,0x61bdd1307c66e300n,0xbf8d5108e27e0d48n,0x240ab57a8b888b20n,0xfc87614baf287e07n,0xef02cdd06ffdb432n,0xa1082c0466df6c0an,0x8215e577001332c8n,0xd39bb9c3a48db6cfn,0x2738259634305c14n,0x61cf4f94c97df93dn,0x1b6baca2ae4e125bn,0x758f450c88572e0bn,0x959f587d507a8359n,0xb063e962e045f54dn,0x60e8ed72c0dff5d1n,0x7b64978555326f9fn,0xfd080d236da814ban,0x8c90fd9b083f4558n,0x106f72fe81e2c590n,0x7976033a39f7d952n,0xa4ec0132764ca04bn,0x733ea705fae4fa77n,0xb4d8f77bc3e56167n,0x9e21f4f903b33fd9n,0x9d765e419fb69f6dn,0xd30c088ba61ea5efn,0x5d94337fbfaf7f5bn,0x1a4e4822eb4d7a59n,0x6ffe73e81b637fb3n,0xddf957bc36d8b9can,0x64d0e29eea8838b3n,0x08dd9bdfd96b9f63n,0x087e79e5a57d1d13n,0xe328e230e3e2b3fbn,0x1c2559e30f0946ben,0x720bf5f26f4d2eaan,0xb0774d261cc609dbn,0x443f64ec5a371195n,0x4112cf68649a260en,0xd813f2fab7f5c5can,0x660d3257380841een,0x59ac2c7873f910a3n,0xe846963877671a17n,0x93b633abfa3469f8n,0xc0c0f5a60ef4cdcfn,0xcaf21ecd4377b28cn,0x57277707199b8175n,0x506c11b9d90e8b1dn,0xd83cc2687a19255fn,0x4a29c6465a314cd1n,0xed2df21216235097n,0xb5635c95ff7296e2n,0x22af003ab672e811n,0x52e762596bf68235n,0x9aeba33ac6ecc6b0n,0x944f6de09134dfb6n,0x6c47bec883a7de39n,0x6ad047c430a12104n,0xa5b1cfdba0ab4067n,0x7c45d833aff07862n,0x5092ef950a16da0bn,0x9338e69c052b8e7bn,0x455a4b4cfe30e3f5n,0x6b02e63195ad0cf8n,0x6b17b224bad6bf27n,0xd1e0ccd25bb9c169n,0xde0c89a556b9ae70n,0x50065e535a213cf6n,0x9c1169fa2777b874n,0x78edefd694af1eedn,0x6dc93d9526a50e68n,0xee97f453f06791edn,0x32ab0edb696703d3n,0x3a6853c7e70757a7n,0x31865ced6120f37dn,0x67fef95d92607890n,0x1f2b1d1f15f6dc9cn,0xb69e38a8965c6b65n,0xaa9119ff184cccf4n,0xf43c732873f24c13n,0xfb4a3d794a9a80d2n,0x3550c2321fd6109cn,0x371f77e76bb8417en,0x6bfa9aae5ec05779n,0xcd04f3ff001a4778n,0xe3273522064480can,0x9f91508bffcfc14an,0x049a7f41061a9e60n,0xfcb6be43a9f2fe9bn,0x08de8a1c7797da9bn,0x8f9887e6078735a1n,0xb5b4071dbfc73a66n,0x230e343dfba08d33n,0x43ed7f5a0fae657dn,0x3a88a0fbbcb05c63n,0x21874b8b4d2dbc4fn,0x1bdea12e35f6a8c9n,0x53c065c6c8e63528n,0xe34a1d250e7a8d6bn,0xd6b04d3b7651dd7en,0x5e90277e7cb39e2dn,0x2c046f22062dc67dn,0xb10bb459132d0a26n,0x3fa9ddfb67e2f199n,0x0e09b88e1914f7afn,0x10e8b35af3eeab37n,0x9eedeca8e272b933n,0xd4c718bc4ae8ae5fn,0x81536d601170fc20n,0x91b534f885818a06n,0xec8177f83f900978n,0x190e714fada5156en,0xb592bf39b0364963n,0x89c350c893ae7dc1n,0xac042e70f8b383f2n,0xb49b52e587a1ee60n,0xfb152fe3ff26da89n,0x3e666e6f69ae2c15n,0x3b544ebe544c19f9n,0xe805a1e290cf2456n,0x24b33c9d7ed25117n,0xe74733427b72f0c1n,0x0a804d18b7097475n,0x57e3306d881edb4fn,0x4ae7d6a36eb5dbcbn,0x2d8d5432157064c8n,0xd1e649de1e7f268bn,0x8a328a1cedfe552cn,0x07a3aec79624c7dan,0x84547ddc3e203c94n,0x990a98fd5071d263n,0x1a4ff12616eefc89n,0xf6f7fd1431714200n,0x30c05b1ba332f41cn,0x8d2636b81555a786n,0x46c9feb55d120902n,0xccec0a73b49c9921n,0x4e9d2827355fc492n,0x19ebb029435dcb0fn,0x4659d2b743848a2cn,0x963ef2c96b33be31n,0x74f85198b05a2e7dn,0x5a0f544dd2b1fb18n,0x03727073c2e134b1n,0xc7f6aa2de59aea61n,0x352787baa0d7c22fn,0x9853eab63b5e0b35n,0xabbdcdd7ed5c0860n,0xcf05daf5ac8d77b0n,0x49cad48cebf4a71en,0x7a4c10ec2158c4a6n,0xd9e92aa246bf719en,0x13ae978d09fe5557n,0x730499af921549ffn,0x4e4b705b92903ba4n,0xff577222c14f0a3an,0x55b6344cf97aafaen,0xb862225b055b6960n,0xcac09afbddd2cdb4n,0xdaf8e9829fe96b5fn,0xb5fdfc5d3132c498n,0x310cb380db6f7503n,0xe87fbb46217a360en,0x2102ae466ebb1148n,0xf8549e1a3aa5e00dn,0x07a69afdcc42261an,0xc4c118bfe78feaaen,0xf9f4892ed96bd438n,0x1af3dbe25d8f45dan,0xf5b4b0b0d2deeeb4n,0x962aceefa82e1c84n,0x046e3ecaaf453ce9n,0xf05d129681949a4cn,0x964781ce734b3c84n,0x9c2ed44081ce5fbdn,0x522e23f3925e319en,0x177e00f9fc32f791n,0x2bc60a63a6f3b3f2n,0x222bbfae61725606n,0x486289ddcc3d6780n,0x7dc7785b8efdfc80n,0x8af38731c02ba980n,0x1fab64ea29a2ddf7n,0xe4d9429322cd065an,0x9da058c67844f20cn,0x24c0e332b70019b0n,0x233003b5a6cfe6adn,0xd586bd01c5c217f6n,0x5e5637885f29bc2bn,0x7eba726d8c94094bn,0x0a56a5f0bfe39272n,0xd79476a84ee20d06n,0x9e4c1269baa4bf37n,0x17efee45b0dee640n,0x1d95b0a5fcf90bc6n,0x93cbe0b699c2585dn,0x65fa4f227a2b6d79n,0xd5f9e858292504d5n,0xc2b5a03f71471a6fn,0x59300222b4561e00n,0xce2f8642ca0712dcn,0x7ca9723fbb2e8988n,0x2785338347f2ba08n,0xc61bb3a141e50e8cn,0x150f361dab9dec26n,0x9f6a419d382595f4n,0x64a53dc924fe7ac9n,0x142de49fff7a7c3dn,0x0c335248857fa9e7n,0x0a9c32d5eae45305n,0xe6c42178c4bbb92en,0x71f1ce2490d20b07n,0xf1bcc3d275afe51an,0xe728e8c83c334074n,0x96fbf83a12884624n,0x81a1549fd6573da5n,0x5fa7867caf35e149n,0x56986e2ef3ed091bn,0x917f1dd5f8886c61n,0xd20d8c88c8ffe65fn,0x31d71dce64b2c310n,0xf165b587df898190n,0xa57e6339dd2cf3a0n,0x1ef6e6dbb1961ec9n,0x70cc73d90bc26e24n,0xe21a6b35df0c3ad7n,0x003a93d8b2806962n,0x1c99ded33cb890a1n,0xcf3145de0add4289n,0xd0e4427a5514fb72n,0x77c621cc9fb3a483n,0x67a34dac4356550bn,0xf8d626aaaf278509n],d=a(521);new class{constructor(){this.openingBook=null,this.engine=new s,this.options={isChess960:!1,hashSize:32},this.interface=d.createInterface({input:process.stdin,output:process.stdout,terminal:!1}),this.interface.on("line",(e=>{const t=e.split(" ")[0];switch(t){case"uci":console.log(`id name ${this.engine.name} ${this.engine.version}`),console.log(`id author ${this.engine.author}`),console.log("option name Hash type spin default 32 min 1 max 512"),console.log("option name UCI_Chess960 type check default false"),console.log("uciok");break;case"isready":console.log("readyok");break;case"quit":process.exit();break;case"ucinewgame":{this.engine=new s,this.engine.isChess960=this.options.isChess960,this.engine.ResizeTranspositionTable(this.options.hashSize);const e=(new r).TryLoad();e&&(this.openingBook=e);break}case"position":this.engine.ParseUCIPosition(e);break;case"go":if(this.openingBook){const e=r.PolyglotHash(this.engine.BoardState),t=this.openingBook.get(e);if(void 0!==t)return void console.log(`bestmove ${t.move}`)}this.engine.ParseUCIGo(e);break;case"setoption":try{const t=e.match(/name (\w+)/);if(!t)return void console.error("Unable to parse option name");switch(t[1]){case"Hash":{const t=parseInt((e.match(/value (\d+)/)||[])[1])||0;t&&(this.options.hashSize=t,this.engine.ResizeTranspositionTable(t));break}case"UCI_Chess960":{const t=e.match(/value (\w+)/);if(!t)return void console.error("Unable to parse value");this.options.isChess960="true"===t[1],this.engine.isChess960=this.options.isChess960;break}default:console.log(`Unrecognized option: ${t[1]}`)}}catch{console.log("Error parsing option")}break;default:console.log(`Unrecognized command: ${t}`)}}))}}})()})();
